name: 🔓 Unlock Challenge bei Issue-Schließung

on:
  issues:
    types: [closed]

jobs:
  unlock-challenge:
    # Nur ausführen wenn Issue das Label 'challenge-error' hat
    if: contains(github.event.issue.labels.*.name, 'challenge-error')
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Repository auschecken
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 🔍 Challenge-ID aus Issue extrahieren
        id: extract
        run: |
          echo "📄 Analysiere Issue-Body..."
          
          # Issue-Body in Datei speichern
          cat << 'EOF' > issue_body.txt
          ${{ github.event.issue.body }}
          EOF
          
          echo "🔍 Suche Challenge-ID im Issue-Body..."
          
          # Verschiedene Muster versuchen:
          # 1. **ID:** w-rter-in-matrix-finden-mcbt2g3d
          ID=$(grep -E '\*\*ID:\*\*' issue_body.txt | sed 's/.*\*\*ID:\*\*[[:space:]]*//' | head -1 | xargs)
          
          # 2. Fallback: ID: (ohne Markdown)
          if [ -z "$ID" ]; then
            ID=$(grep -E '^ID:' issue_body.txt | cut -d ':' -f2 | xargs)
          fi
          
          # 3. Fallback: **Challenge:** titel **ID:** id
          if [ -z "$ID" ]; then
            ID=$(grep -oE '\*\*ID:\*\*[[:space:]]*[a-zA-Z0-9_-]+' issue_body.txt | sed 's/.*\*\*ID:\*\*[[:space:]]*//')
          fi
          
          # 4. Letzter Fallback: Extrahiere aus Titel (weniger zuverlässig)
          if [ -z "$ID" ]; then
            echo "⚠️ Keine direkte ID gefunden, versuche Extraktion aus Issue-Titel..."
            # Hier könnte man versuchen aus dem Issue-Titel zu extrahieren
            echo "Issue-Titel: ${{ github.event.issue.title }}"
          fi
          
          if [ -z "$ID" ]; then
            echo "❌ Keine Challenge-ID gefunden!"
            echo "📋 Issue-Body Inhalt:"
            cat issue_body.txt
            echo ""
            echo "💡 Erwartetes Format: **ID:** challenge-id-hier"
            exit 1
          fi
          
          echo "✅ Challenge-ID gefunden: $ID"
          echo "challenge_id=$ID" >> $GITHUB_OUTPUT
          
          # Bereinige temporäre Datei
          rm issue_body.txt
      
      - name: ✅ Prüfe ob Challenge existiert
        id: check
        run: |
          ID=${{ steps.extract.outputs.challenge_id }}
          CHALLENGE_DIR="challenges/$ID"
          CONFIG_FILE="$CHALLENGE_DIR/challenge.json"
          
          if [ ! -d "$CHALLENGE_DIR" ]; then
            echo "❌ Challenge-Ordner nicht gefunden: $CHALLENGE_DIR"
            exit 1
          fi
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Challenge-Konfiguration nicht gefunden: $CONFIG_FILE"
            exit 1
          fi
          
          echo "✅ Challenge existiert: $CONFIG_FILE"
          
          # Aktueller Status prüfen
          CURRENT_STATUS=$(jq -r '.status // "unknown"' "$CONFIG_FILE")
          echo "📊 Aktueller Status: $CURRENT_STATUS"
          echo "current_status=$CURRENT_STATUS" >> $GITHUB_OUTPUT
      
      - name: 🔧 Challenge-Status zurücksetzen
        run: |
          ID=${{ steps.extract.outputs.challenge_id }}
          CONFIG_FILE="challenges/$ID/challenge.json"
          
          echo "🛠️ Setze Challenge-Status zurück in: $CONFIG_FILE"
          
          # Erstelle Backup
          cp "$CONFIG_FILE" "$CONFIG_FILE.backup"
          
          # Status zurücksetzen mit jq
          jq '
            .status = "approved" |
            .hasErrors = false |
            .isHidden = false |
            del(.reportedIssueNumber) |
            del(.reportedIssueUrl) |
            del(.errorReport) |
            .lastUpdated = now | strftime("%Y-%m-%dT%H:%M:%SZ")
          ' "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
          
          echo "✅ Challenge-Status aktualisiert"
          echo "📋 Neuer Inhalt:"
          jq . "$CONFIG_FILE"
      
      - name: 📝 Error-Report als gelöst markieren
        run: |
          ID=${{ steps.extract.outputs.challenge_id }}
          ERROR_FILE="challenges/$ID/error-report.json"
          
          if [ -f "$ERROR_FILE" ]; then
            echo "📝 Markiere Error-Report als gelöst: $ERROR_FILE"
            
            # Error-Report aktualisieren
            jq '
              .isResolved = true |
              .resolvedAt = now | strftime("%Y-%m-%dT%H:%M:%SZ") |
              .resolvedBy = "github-action" |
              .resolvedIssue = ${{ github.event.issue.number }}
            ' "$ERROR_FILE" > "$ERROR_FILE.tmp" && mv "$ERROR_FILE.tmp" "$ERROR_FILE"
            
            echo "✅ Error-Report aktualisiert"
          else
            echo "ℹ️ Kein Error-Report gefunden ($ERROR_FILE)"
          fi
      
      - name: 🎯 Git-Konfiguration setzen
        run: |
          git config user.name "Challenge-Unlock-Bot"
          git config user.email "action@github.com"
      
      - name: 💾 Änderungen committen
        run: |
          ID=${{ steps.extract.outputs.challenge_id }}
          
          # Status prüfen
          if git diff --quiet; then
            echo "ℹ️ Keine Änderungen zu committen"
            exit 0
          fi
          
          # Änderungen hinzufügen
          git add "challenges/$ID/"
          
          # Commit erstellen
          git commit -m "🔓 Unlock Challenge '$ID' nach Issue-Schließung
          
          ✅ Challenge wieder freigegeben nach Issue #${{ github.event.issue.number }}
          📋 Status: approved
          🗓️ Freigegeben: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          🤖 Automatisch durch GitHub Action"
          
          echo "✅ Änderungen committet"
      
      - name: ⬆️ Änderungen pushen
        run: |
          echo "📤 Pushe Änderungen zu main branch..."
          git push origin main
          echo "✅ Änderungen erfolgreich gepusht"
      
      - name: 💬 Issue-Kommentar hinzufügen
        uses: actions/github-script@v7
        with:
          script: |
            const challengeId = '${{ steps.extract.outputs.challenge_id }}';
            const currentStatus = '${{ steps.check.outputs.current_status }}';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ✅ Challenge automatisch freigegeben!
              
              **Challenge-ID:** \`${challengeId}\`
              **Vorheriger Status:** \`${currentStatus}\`
              **Neuer Status:** \`approved\`
              
              ### 🎉 Was passiert ist:
              - ✅ Challenge-Status wurde auf \`approved\` zurückgesetzt
              - 🔓 Challenge ist wieder für Benutzer sichtbar
              - 📝 Error-Report als gelöst markiert
              - 🗑️ Fehler-Flags entfernt
              
              ### 🚀 Nächste Schritte:
              Die Challenge \`${challengeId}\` ist jetzt wieder verfügbar und kann in der VS Code Extension geladen werden.
              
              ---
              🤖 *Automatisch ausgeführt durch GitHub Action*`
            });
            
            console.log('✅ Kommentar zu Issue hinzugefügt');
      
      - name: 🏷️ Issue-Labels aktualisieren  
        uses: actions/github-script@v7
        with:
          script: |
            // 'resolved' Label hinzufügen
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['resolved', 'auto-fixed']
            });
            
            console.log('✅ Labels hinzugefügt: resolved, auto-fixed');

  # Separater Job für Fehlerbehandlung
  handle-failure:
    if: failure() && contains(github.event.issue.labels.*.name, 'challenge-error')
    runs-on: ubuntu-latest
    needs: unlock-challenge
    
    steps:
      - name: 💬 Fehler-Kommentar hinzufügen
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ❌ Automatische Challenge-Freigabe fehlgeschlagen
              
              Der Versuch, diese Challenge automatisch freizugeben, ist fehlgeschlagen.
              
              ### 🛠️ Manuelle Schritte erforderlich:
              1. Challenge-ID aus dem Issue-Body extrahieren
              2. \`challenges/{challenge-id}/challenge.json\` bearbeiten
              3. Status auf \`"approved"\` setzen und Fehler-Flags entfernen
              4. Änderungen committen und pushen
              
              ### 🔍 Debugging-Info:
              - **Issue:** #${context.issue.number}
              - **Workflow-Run:** ${context.runId}
              - **Timestamp:** ${new Date().toISOString()}
              
              Bitte überprüfe den [Workflow-Log](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) für weitere Details.
              
              ---
              🤖 *Automatischer Fehlerkommentar*`
            });
            
            // 'manual-action-required' Label hinzufügen
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['manual-action-required']
            });
