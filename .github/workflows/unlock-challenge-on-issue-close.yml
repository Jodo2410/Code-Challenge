name: 🔄 Auto-Release Challenge on Issue Close

on:
  issues:
    types: [closed]

jobs:
  release-challenge:
    name: 🔓 Release Challenge
    runs-on: ubuntu-latest
    
    # Nur für Issues mit challenge-error Label
    if: contains(github.event.issue.labels.*.name, 'challenge-error')
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 🔍 Extract Challenge ID from Issue
        id: extract-challenge
        run: |
          # Challenge ID aus Issue-Titel oder Body extrahieren
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          
          # Mehrere Muster versuchen
          CHALLENGE_ID=""
          
          # Muster 1: Challenge Error Report: Title (language)
          if [[ "$ISSUE_TITLE" =~ Challenge\ Error\ Report:\ (.+)\ \((.+)\) ]]; then
            CHALLENGE_TITLE="${BASH_REMATCH[1]}"
            CHALLENGE_LANG="${BASH_REMATCH[2]}"
            echo "Found challenge title: $CHALLENGE_TITLE"
            echo "Found challenge language: $CHALLENGE_LANG"
          fi
          
          # Muster 2: Challenge ID aus Issue Body
          if [[ "$ISSUE_BODY" =~ \*\*Challenge:\*\*\ (.+) ]] || [[ "$ISSUE_BODY" =~ Challenge\ ID:\ (.+) ]]; then
            CHALLENGE_FROM_BODY="${BASH_REMATCH[1]}"
            echo "Found challenge from body: $CHALLENGE_FROM_BODY"
          fi
          
          # Challenge-Ordner suchen
          echo "🔍 Searching for challenge folders..."
          find challenges/ -name "challenge.json" -type f | while read -r file; do
            FOLDER=$(dirname "$file")
            CHALLENGE_JSON_ID=$(basename "$FOLDER")
            
            # JSON-Inhalt lesen
            TITLE_IN_JSON=$(jq -r '.title // empty' "$file" 2>/dev/null || echo "")
            LANG_IN_JSON=$(jq -r '.language // empty' "$file" 2>/dev/null || echo "")
            ISSUE_NUM_IN_JSON=$(jq -r '.reportedIssueNumber // empty' "$file" 2>/dev/null || echo "")
            
            echo "Checking: $CHALLENGE_JSON_ID"
            echo "  Title: $TITLE_IN_JSON"
            echo "  Language: $LANG_IN_JSON"
            echo "  Reported Issue: $ISSUE_NUM_IN_JSON"
            
            # Match by Issue Number (beste Methode)
            if [[ "$ISSUE_NUM_IN_JSON" == "${{ github.event.issue.number }}" ]]; then
              echo "✅ Found challenge by issue number: $CHALLENGE_JSON_ID"
              echo "challenge_id=$CHALLENGE_JSON_ID" >> $GITHUB_OUTPUT
              echo "challenge_folder=$FOLDER" >> $GITHUB_OUTPUT
              echo "match_method=issue_number" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Match by Title and Language
            if [[ -n "$CHALLENGE_TITLE" && -n "$CHALLENGE_LANG" ]]; then
              if [[ "$TITLE_IN_JSON" == "$CHALLENGE_TITLE" && "$LANG_IN_JSON" == "$CHALLENGE_LANG" ]]; then
                echo "✅ Found challenge by title+language: $CHALLENGE_JSON_ID"
                echo "challenge_id=$CHALLENGE_JSON_ID" >> $GITHUB_OUTPUT
                echo "challenge_folder=$FOLDER" >> $GITHUB_OUTPUT
                echo "match_method=title_language" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
          done
          
          # Fallback: Kein Match gefunden
          if [[ -z "$(cat $GITHUB_OUTPUT | grep challenge_id)" ]]; then
            echo "❌ No matching challenge found"
            echo "challenge_id=" >> $GITHUB_OUTPUT
            echo "challenge_folder=" >> $GITHUB_OUTPUT
            echo "match_method=none" >> $GITHUB_OUTPUT
          fi
      
      - name: 🔓 Release Challenge
        if: steps.extract-challenge.outputs.challenge_id != ''
        id: release
        run: |
          CHALLENGE_FOLDER="${{ steps.extract-challenge.outputs.challenge_folder }}"
          CHALLENGE_ID="${{ steps.extract-challenge.outputs.challenge_id }}"
          MATCH_METHOD="${{ steps.extract-challenge.outputs.match_method }}"
          
          echo "🎯 Releasing challenge: $CHALLENGE_ID"
          echo "📁 Folder: $CHALLENGE_FOLDER"
          echo "🔍 Match method: $MATCH_METHOD"
          
          # challenge.json bearbeiten
          CHALLENGE_JSON="$CHALLENGE_FOLDER/challenge.json"
          
          if [[ ! -f "$CHALLENGE_JSON" ]]; then
            echo "❌ Challenge JSON not found: $CHALLENGE_JSON"
            exit 1
          fi
          
          # Backup erstellen
          cp "$CHALLENGE_JSON" "$CHALLENGE_JSON.backup"
          
          # Status zurücksetzen
          jq '
            .status = "approved" |
            del(.reportedIssueNumber) |
            del(.reportedIssueUrl) |
            del(.isHidden) |
            .releasedAt = now |
            .releasedBy = "github-automation"
          ' "$CHALLENGE_JSON" > "$CHALLENGE_JSON.tmp" && mv "$CHALLENGE_JSON.tmp" "$CHALLENGE_JSON"
          
          echo "✅ Challenge status reset to approved"
          
          # error-report.json als resolved markieren (falls vorhanden)
          ERROR_REPORT="$CHALLENGE_FOLDER/error-report.json"
          if [[ -f "$ERROR_REPORT" ]]; then
            jq '
              .isResolved = true |
              .resolvedAt = now |
              .resolvedBy = "github-automation" |
              .resolvedIssue = ${{ github.event.issue.number }}
            ' "$ERROR_REPORT" > "$ERROR_REPORT.tmp" && mv "$ERROR_REPORT.tmp" "$ERROR_REPORT"
            echo "✅ Error report marked as resolved"
          fi
          
          # Git konfigurieren
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Änderungen committen
          git add "$CHALLENGE_JSON"
          if [[ -f "$ERROR_REPORT" ]]; then
            git add "$ERROR_REPORT"
          fi
          
          git commit -m "🔓 Auto-release challenge $CHALLENGE_ID

          ✅ Issue #${{ github.event.issue.number }} closed
          🎯 Challenge: $CHALLENGE_ID
          📅 Released: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          🔍 Match method: $MATCH_METHOD
          
          Challenge status reset to 'approved' and is now available to users.
          
          Auto-generated by GitHub Actions
          Issue: ${{ github.event.issue.html_url }}"
          
          git push
          
          echo "success=true" >> $GITHUB_OUTPUT
          echo "challenge_title=$(jq -r '.title' $CHALLENGE_JSON)" >> $GITHUB_OUTPUT
      
      - name: 💬 Comment on Issue
        if: steps.release.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const challengeId = '${{ steps.extract-challenge.outputs.challenge_id }}';
            const challengeTitle = '${{ steps.release.outputs.challenge_title }}';
            const matchMethod = '${{ steps.extract-challenge.outputs.match_method }}';
            
            const body = `## ✅ Challenge automatisch freigegeben
            
            Die Challenge wurde erfolgreich wieder freigegeben und ist jetzt für Benutzer verfügbar.
            
            ### 🎯 Challenge Details
            - **ID:** \`${challengeId}\`
            - **Titel:** ${challengeTitle}
            - **Status:** \`approved\` ✅
            - **Freigegeben:** ${new Date().toISOString()}
            
            ### 🔍 Technische Details
            - **Match-Methode:** ${matchMethod}
            - **Automatisierung:** GitHub Actions Workflow
            - **Commit:** ${context.sha.substring(0, 7)}
            
            ### 🚀 Nächste Schritte
            Die Challenge ist jetzt:
            - ✅ In der Challenge-Liste sichtbar
            - ✅ Ladbar durch VS Code Extension
            - ✅ Verfügbar für alle Benutzer
            
            Das Issue wurde automatisch als \`resolved\` markiert.
            
            ---
            🤖 *Automatisch generiert durch GitHub Actions*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      - name: 🏷️ Update Issue Labels
        if: steps.release.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // 'resolved' Label hinzufügen
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['resolved', 'auto-released']
            });
            
            // 'needs-admin-review' Label entfernen (falls vorhanden)
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'needs-admin-review'
              });
            } catch (error) {
              console.log('Label needs-admin-review not found, skipping removal');
            }
      
      - name: ❌ Handle No Challenge Found
        if: steps.extract-challenge.outputs.challenge_id == ''
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## ⚠️ Challenge nicht gefunden
            
            Es konnte keine passende Challenge zu diesem Issue gefunden werden.
            
            ### 🔍 Geprüfte Methoden
            - Issue-Nummer in challenge.json Dateien
            - Titel und Sprache aus Issue-Titel
            - Challenge-ID aus Issue-Body
            
            ### 🛠️ Manuelle Schritte erforderlich
            1. Challenge-Ordner manuell identifizieren
            2. In \`challenge.json\` den Status auf \`"approved"\` setzen
            3. \`reportedIssueNumber\`, \`reportedIssueUrl\` und \`isHidden\` entfernen
            4. Änderungen committen und pushen
            
            ### 📋 Issue-Information
            - **Issue-Titel:** ${{ github.event.issue.title }}
            - **Issue-Nummer:** #${{ github.event.issue.number }}
            - **Labels:** ${context.payload.issue.labels.map(l => l.name).join(', ')}
            
            ---
            🤖 *Automatisch generiert durch GitHub Actions*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            // 'needs-manual-action' Label hinzufügen
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-action']
            });
      
      - name: 📊 Summary
        run: |
          echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue:** #${{ github.event.issue.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Challenge ID:** ${{ steps.extract-challenge.outputs.challenge_id || 'Not found' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Match Method:** ${{ steps.extract-challenge.outputs.match_method || 'none' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Success:** ${{ steps.release.outputs.success || 'false' }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.release.outputs.success }}" == "true" ]]; then
            echo "- **Status:** ✅ Challenge successfully released" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ❌ Manual intervention required" >> $GITHUB_STEP_SUMMARY
          fi
