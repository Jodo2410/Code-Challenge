name: 🔓 Auto-Release Challenge on Issue Close

on:
  issues:
    types: [closed]

jobs:
  release-challenge:
    name: 🔓 Release Challenge
    runs-on: ubuntu-latest
    
    # Nur für Issues mit challenge-error Label
    if: contains(github.event.issue.labels.*.name, 'challenge-error')
    
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 🔍 Find Challenge by Issue Number
        id: find-challenge
        run: |
          echo "🔍 Searching for challenge with issue number: ${{ github.event.issue.number }}"
          
          FOUND_CHALLENGE=""
          FOUND_FOLDER=""
          
          # Durchsuche alle challenge.json Dateien
          for file in challenges/*/challenge.json; do
            if [[ -f "$file" ]]; then
              FOLDER=$(dirname "$file")
              CHALLENGE_ID=$(basename "$FOLDER")
              
              # Prüfe reportedIssueNumber
              ISSUE_NUM=$(jq -r '.reportedIssueNumber // empty' "$file" 2>/dev/null || echo "")
              TITLE=$(jq -r '.title // empty' "$file" 2>/dev/null || echo "")
              
              echo "Checking: $CHALLENGE_ID (Title: $TITLE, Issue: $ISSUE_NUM)"
              
              if [[ "$ISSUE_NUM" == "${{ github.event.issue.number }}" ]]; then
                echo "✅ Found matching challenge: $CHALLENGE_ID"
                FOUND_CHALLENGE="$CHALLENGE_ID"
                FOUND_FOLDER="$FOLDER"
                break
              fi
            fi
          done
          
          if [[ -n "$FOUND_CHALLENGE" ]]; then
            echo "challenge_id=$FOUND_CHALLENGE" >> $GITHUB_OUTPUT
            echo "challenge_folder=$FOUND_FOLDER" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "❌ No challenge found with issue number ${{ github.event.issue.number }}"
          fi
      
      - name: 🔓 Release Challenge
        if: steps.find-challenge.outputs.found == 'true'
        id: release
        run: |
          CHALLENGE_FOLDER="${{ steps.find-challenge.outputs.challenge_folder }}"
          CHALLENGE_ID="${{ steps.find-challenge.outputs.challenge_id }}"
          CHALLENGE_JSON="$CHALLENGE_FOLDER/challenge.json"
          
          echo "🎯 Releasing challenge: $CHALLENGE_ID"
          echo "📁 Folder: $CHALLENGE_FOLDER"
          
          if [[ ! -f "$CHALLENGE_JSON" ]]; then
            echo "❌ Challenge JSON not found: $CHALLENGE_JSON"
            exit 1
          fi
          
          # Backup erstellen
          cp "$CHALLENGE_JSON" "$CHALLENGE_JSON.backup"
          
          # Status auf approved setzen und Issue-Referenzen entfernen
          jq '
            .status = "approved" |
            del(.reportedIssueNumber) |
            del(.reportedIssueUrl) |
            del(.isHidden) |
            .releasedAt = now |
            .releasedBy = "github-automation"
          ' "$CHALLENGE_JSON" > "$CHALLENGE_JSON.tmp" && mv "$CHALLENGE_JSON.tmp" "$CHALLENGE_JSON"
          
          echo "✅ Challenge status updated to approved"
          
          # Git konfigurieren
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Änderungen committen
          git add "$CHALLENGE_JSON"
          git commit -m "🔓 Auto-release challenge: $CHALLENGE_ID

Issue #${{ github.event.issue.number }} closed - Challenge freigegeben
Status: approved ✅
Released: $(date -u +%Y-%m-%dT%H:%M:%SZ)

Auto-generated by GitHub Actions"
          
          git push
          
          # Challenge-Titel für Kommentar extrahieren
          CHALLENGE_TITLE=$(jq -r '.title' "$CHALLENGE_JSON")
          echo "success=true" >> $GITHUB_OUTPUT
          echo "challenge_title=$CHALLENGE_TITLE" >> $GITHUB_OUTPUT
      
      - name: 💬 Success Comment
        if: steps.release.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const challengeId = '${{ steps.find-challenge.outputs.challenge_id }}';
            const challengeTitle = '${{ steps.release.outputs.challenge_title }}';
            
            const body = `## ✅ Challenge automatisch freigegeben

Die Challenge wurde erfolgreich wieder freigegeben!

### 🎯 Challenge Details
- **ID:** \`${challengeId}\`
- **Titel:** ${challengeTitle}
- **Status:** \`approved\` ✅
- **Freigegeben:** ${new Date().toISOString()}

### 🚀 Verfügbarkeit
Die Challenge ist jetzt wieder:
- ✅ In der Challenge-Liste sichtbar
- ✅ Ladbar durch VS Code Extension
- ✅ Verfügbar für alle Benutzer

---
🤖 *Automatisch freigegeben durch GitHub Actions*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      - name: 🏷️ Update Labels
        if: steps.release.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // 'resolved' Label hinzufügen
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['resolved', 'auto-released']
            });
      
      - name: ❌ Challenge Not Found
        if: steps.find-challenge.outputs.found == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## ❌ Challenge nicht gefunden

Es konnte keine Challenge gefunden werden, die mit Issue #${{ github.event.issue.number }} verknüpft ist.

### 🔍 Geprüft wurde:
- Alle \`challenge.json\` Dateien im \`challenges/\` Ordner
- \`reportedIssueNumber\` Feld in jeder Challenge

### 🛠️ Manuelle Schritte:
1. Challenge-Ordner manuell finden
2. In \`challenge.json\` setzen: \`"status": "approved"\`
3. Entfernen: \`reportedIssueNumber\`, \`reportedIssueUrl\`, \`isHidden\`
4. Änderungen committen

---
🤖 *GitHub Actions Workflow*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            // 'needs-manual-action' Label hinzufügen
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-manual-action']
            });
      
      - name: 🧹 Cleanup
        if: always()
        run: |
          # Backup-Dateien entfernen
          find challenges/ -name "*.backup" -type f -delete 2>/dev/null || true
          find challenges/ -name "*.tmp" -type f -delete 2>/dev/null || true
          
          echo "✅ Workflow completed"
