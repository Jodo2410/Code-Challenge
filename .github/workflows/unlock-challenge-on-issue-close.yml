name: 🔓 Universal Challenge Unlock

on:
  issues:
    types: [closed]

permissions:
  issues: write
  contents: write

jobs:
  unlock-challenge:
    if: |
      contains(github.event.issue.labels.*.name, 'challenge-error') ||
      contains(github.event.issue.title, 'Challenge Error Report') ||
      contains(github.event.issue.body, '🚨 Challenge Error Report') ||
      contains(github.event.issue.body, '**ID:**')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Repository auschecken
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 🔍 Challenge-ID Universal Extraktion
        id: extract_id
        run: |
          echo "🔍 Starte universelle Challenge-ID Extraktion..."
          
          ISSUE_BODY='${{ github.event.issue.body }}'
          
          echo "📄 Issue-Body Länge: ${#ISSUE_BODY} Zeichen"
          
          echo "🧪 Methode 1: **ID:** Pattern"
          ID1=$(echo "$ISSUE_BODY" | grep -oE '\*\*ID:\*\*[[:space:]]*[a-zA-Z0-9._-]+' | sed 's/.*\*\*ID:\*\*[[:space:]]*//' | head -1 | tr -d ' \t\n\r' 2>/dev/null || echo "")
          echo "   Gefunden: '$ID1'"
          
          echo "🧪 Methode 2: ID: Pattern"
          ID2=$(echo "$ISSUE_BODY" | grep -E '^[[:space:]]*ID:[[:space:]]*[a-zA-Z0-9._-]+' | sed 's/.*ID:[[:space:]]*//' | head -1 | tr -d ' \t\n\r' 2>/dev/null || echo "")
          echo "   Gefunden: '$ID2'"
          
          echo "🧪 Methode 3: mcbt Pattern"
          ID3=$(echo "$ISSUE_BODY" | grep -oE '[a-zA-Z0-9-]+mcbt[a-zA-Z0-9]+' | head -1 | tr -d ' \t\n\r' 2>/dev/null || echo "")
          echo "   Gefunden: '$ID3'"
          
          echo "🧪 Methode 4: Generic Challenge Pattern"
          ID4=$(echo "$ISSUE_BODY" | grep -oE '[a-z][a-z0-9-]{10,50}[a-z0-9]' | grep -E '.*-.*-.*' | head -1 | tr -d ' \t\n\r' 2>/dev/null || echo "")
          echo "   Gefunden: '$ID4'"
          
          FINAL_ID=""
          
          if [ -n "$ID1" ]; then
            FINAL_ID="$ID1"
            echo "✅ Verwende ID aus Methode 1: $FINAL_ID"
          elif [ -n "$ID3" ]; then
            FINAL_ID="$ID3"
            echo "✅ Verwende ID aus Methode 3: $FINAL_ID"
          elif [ -n "$ID2" ]; then
            FINAL_ID="$ID2"
            echo "✅ Verwende ID aus Methode 2: $FINAL_ID"
          elif [ -n "$ID4" ]; then
            FINAL_ID="$ID4"
            echo "✅ Verwende ID aus Methode 4: $FINAL_ID"
          fi
          
          if [ -z "$FINAL_ID" ]; then
            echo "❌ Keine Challenge-ID gefunden!"
            echo ""
            echo "🔍 Debug: Issue-Body Inhalt (erste 500 Zeichen):"
            echo "$ISSUE_BODY" | head -c 500
            echo ""
            echo "💡 Erwartete Formate:"
            echo "   - **ID:** challenge-id-hier"
            echo "   - ID: challenge-id-hier"
            echo "   - Beliebiger Text mit challenge-id-mcbtXXXX"
            exit 1
          fi
          
          CLEAN_ID=$(echo "$FINAL_ID" | tr -cd 'a-zA-Z0-9._-')
          
          if [ "$CLEAN_ID" != "$FINAL_ID" ]; then
            echo "⚠️ ID bereinigt: '$FINAL_ID' → '$CLEAN_ID'"
            FINAL_ID="$CLEAN_ID"
          fi
          
          echo "🎯 Finale Challenge-ID: $FINAL_ID"
          echo "challenge_id=$FINAL_ID" >> $GITHUB_OUTPUT
      
      - name: ✅ Challenge-Existenz prüfen
        id: validate
        run: |
          ID=${{ steps.extract_id.outputs.challenge_id }}
          CHALLENGE_DIR="challenges/$ID"
          CONFIG_FILE="$CHALLENGE_DIR/challenge.json"
          
          echo "🔍 Prüfe Challenge-Existenz..."
          echo "📁 Challenge-Verzeichnis: $CHALLENGE_DIR"
          echo "📄 Config-Datei: $CONFIG_FILE"
          
          if [ ! -d "challenges" ]; then
            echo "❌ Challenges-Hauptordner existiert nicht!"
            echo "📁 Repository-Struktur:"
            ls -la
            exit 1
          fi
          
          if [ ! -d "$CHALLENGE_DIR" ]; then
            echo "❌ Challenge-Ordner nicht gefunden: $CHALLENGE_DIR"
            echo ""
            echo "📁 Verfügbare Challenges (erste 10):"
            find challenges/ -maxdepth 1 -type d -name "*" | head -10 || echo "Keine Challenge-Ordner gefunden"
            echo ""
            echo "🔍 Suche nach ähnlichen IDs:"
            find challenges/ -maxdepth 1 -type d -name "*${ID:0:10}*" 2>/dev/null || echo "Keine ähnlichen IDs gefunden"
            exit 1
          fi
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "❌ Challenge-Konfiguration nicht gefunden: $CONFIG_FILE"
            echo ""
            echo "📁 Ordner-Inhalt:"
            ls -la "$CHALLENGE_DIR/"
            exit 1
          fi
          
          echo "✅ Challenge existiert und ist gültig"
          
          if command -v jq >/dev/null 2>&1; then
            CURRENT_STATUS=$(jq -r '.status // "unknown"' "$CONFIG_FILE" 2>/dev/null || echo "unknown")
            echo "📊 Aktueller Status: $CURRENT_STATUS"
            echo "current_status=$CURRENT_STATUS" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ jq nicht verfügbar - Status-Check übersprungen"
            echo "current_status=unknown" >> $GITHUB_OUTPUT
          fi
      
      - name: 🔧 Challenge-Status zurücksetzen
        run: |
          ID=${{ steps.extract_id.outputs.challenge_id }}
          CONFIG_FILE="challenges/$ID/challenge.json"
          
          echo "🛠️ Setze Challenge-Status zurück..."
          echo "📄 Datei: $CONFIG_FILE"
          
          cp "$CONFIG_FILE" "$CONFIG_FILE.backup"
          echo "💾 Backup erstellt: $CONFIG_FILE.backup"
          
          echo "🔧 Aktualisiere Status-Felder..."
          
          sed -i 's/"status"[[:space:]]*:[[:space:]]*"[^"]*"/"status": "approved"/g' "$CONFIG_FILE"
          sed -i 's/"hasErrors"[[:space:]]*:[[:space:]]*true/"hasErrors": false/g' "$CONFIG_FILE"
          sed -i 's/"isHidden"[[:space:]]*:[[:space:]]*true/"isHidden": false/g' "$CONFIG_FILE"
          sed -i '/"reportedIssueNumber"/d' "$CONFIG_FILE"
          sed -i '/"reportedIssueUrl"/d' "$CONFIG_FILE"
          sed -i '/"errorReport"/d' "$CONFIG_FILE"
          sed -i 's/"status"[[:space:]]*:[[:space:]]*"reported"/"status": "approved"/g' "$CONFIG_FILE"
          sed -i 's/"status"[[:space:]]*:[[:space:]]*"pending"/"status": "approved"/g' "$CONFIG_FILE"
          sed -i 's/"status"[[:space:]]*:[[:space:]]*"rejected"/"status": "approved"/g' "$CONFIG_FILE"
          
          echo "✅ Status-Update abgeschlossen"
          
          if command -v jq >/dev/null 2>&1; then
            if jq . "$CONFIG_FILE" >/dev/null 2>&1; then
              NEW_STATUS=$(jq -r '.status' "$CONFIG_FILE" 2>/dev/null || echo "unknown")
              echo "📊 Neuer Status: $NEW_STATUS"
            else
              echo "⚠️ JSON-Validation fehlgeschlagen - verwende Backup"
              mv "$CONFIG_FILE.backup" "$CONFIG_FILE"
              exit 1
            fi
          fi
          
          echo "📄 Neue Dateigröße: $(wc -c < "$CONFIG_FILE") bytes"
      
      - name: 📝 Error-Report aktualisieren
        run: |
          ID=${{ steps.extract_id.outputs.challenge_id }}
          ERROR_FILE="challenges/$ID/error-report.json"
          
          if [ -f "$ERROR_FILE" ]; then
            echo "📝 Aktualisiere Error-Report: $ERROR_FILE"
            
            sed -i 's/"isResolved"[[:space:]]*:[[:space:]]*false/"isResolved": true/g' "$ERROR_FILE"
            
            if command -v jq >/dev/null 2>&1; then
              TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              jq --arg timestamp "$TIMESTAMP" --argjson issue "${{ github.event.issue.number }}" '
                .isResolved = true |
                .resolvedAt = $timestamp |
                .resolvedBy = "github-action" |
                .resolvedIssue = $issue
              ' "$ERROR_FILE" > "$ERROR_FILE.tmp" && mv "$ERROR_FILE.tmp" "$ERROR_FILE"
              echo "✅ Error-Report mit jq aktualisiert"
            else
              echo "ℹ️ Error-Report mit sed aktualisiert"
            fi
          else
            echo "ℹ️ Kein Error-Report gefunden: $ERROR_FILE"
          fi
      
      - name: 💾 Git-Konfiguration und Commit
        run: |
          ID=${{ steps.extract_id.outputs.challenge_id }}
          
          git config user.name "challenge-unlock-bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          echo "🔍 Prüfe auf Änderungen..."
          
          if git diff --quiet; then
            echo "ℹ️ Keine Änderungen zu committen"
          else
            echo "📝 Committen der Änderungen..."
            
            git add "challenges/$ID/"
            
            git commit -m "🔓 Challenge automatisch entsperrt: $ID

Entsperrt nach Issue-Schließung #${{ github.event.issue.number }}
✅ Status: approved
🗓️ Entsperrt: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
🤖 Automatisch durch GitHub Actions"
            
            echo "📤 Push der Änderungen..."
            git push origin main
            
            echo "✅ Challenge $ID erfolgreich entsperrt und gepusht"
          fi
      
      - name: 💬 Erfolgs-Kommentar hinzufügen
        uses: actions/github-script@v7
        with:
          script: |
            const challengeId = '${{ steps.extract_id.outputs.challenge_id }}';
            const currentStatus = '${{ steps.validate.outputs.current_status }}' || 'unknown';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ✅ Challenge automatisch entsperrt!
              
              **🎯 Challenge-ID:** \`${challengeId}\`  
              **📊 Vorheriger Status:** \`${currentStatus}\`  
              **📊 Neuer Status:** \`approved\`  
              **🕒 Entsperrt:** ${new Date().toLocaleString('de-DE', {timeZone: 'Europe/Berlin'})}
              
              ### 🎉 Was ist passiert:
              - ✅ Challenge-Status wurde auf \`approved\` zurückgesetzt
              - 🔓 Challenge ist wieder für alle Benutzer sichtbar  
              - 📝 Error-Report als gelöst markiert
              - 🗑️ Fehler-Flags und Issue-Referenzen entfernt
              
              ### 🚀 Nächste Schritte:
              Die Challenge \`${challengeId}\` ist jetzt wieder verfügbar und kann in der **VS Code Coding Challenges Extension** geladen werden.
              
              ---
              🤖 *Automatisch entsperrt durch GitHub Actions*`
            });
            
            console.log('✅ Erfolgs-Kommentar hinzugefügt');
      
      - name: 🏷️ Issue-Labels aktualisieren
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['resolved', 'auto-unlocked', 'challenge-restored']
              });
              
              console.log('✅ Labels hinzugefügt: resolved, auto-unlocked, challenge-restored');
            } catch (error) {
              console.error('⚠️ Fehler beim Hinzufügen der Labels:', error);
            }

  handle-failure:
    if: failure()
    needs: unlock-challenge
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: 💬 Detaillierter Fehler-Kommentar
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ❌ Automatische Challenge-Entsperrung fehlgeschlagen
              
              Der Versuch, die Challenge automatisch zu entsperren, ist fehlgeschlagen.
              
              ### 🛠️ Manuelle Schritte erforderlich:
              
              #### 1. Challenge-ID finden
              Suche im Issue-Body nach der Challenge-ID (Format: \`**ID:** challenge-id-hier\`)
              
              #### 2. Datei bearbeiten
              Öffne die Datei: \`challenges/{challenge-id}/challenge.json\`
              
              #### 3. Status ändern
              Ändere folgende Werte:
              \`\`\`json
              {
                "status": "approved",
                "hasErrors": false,
                "isHidden": false
              }
              \`\`\`
              
              #### 4. Referenzen entfernen
              Lösche diese Zeilen (falls vorhanden):
              \`\`\`json
              "reportedIssueNumber": ${context.issue.number},
              "reportedIssueUrl": "...",
              "errorReport": { ... }
              \`\`\`
              
              #### 5. Speichern
              Committe und pushe die Änderungen
              
              ### 🔍 Debugging-Informationen:
              - **Issue:** #${context.issue.number}
              - **Workflow-Run:** [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              - **Fehler-Zeit:** ${new Date().toISOString()}
              
              ### 📋 Häufige Ursachen:
              - Challenge-ID konnte nicht aus Issue-Body extrahiert werden
              - Challenge-Ordner existiert nicht im Repository
              - Datei-Permissions oder Git-Fehler
              - JSON-Format ungültig
              
              **💡 Tipp:** Prüfe die Workflow-Logs für detaillierte Fehlermeldungen.
              
              ---
              🤖 *Fehlerbehandlung - Manuelle Aktion erforderlich*`
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['manual-unlock-required', 'auto-unlock-failed']
            });
            
            console.log('✅ Fehler-Kommentar und Labels hinzugefügt');
