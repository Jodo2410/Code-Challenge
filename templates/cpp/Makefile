# C++ Template Challenge Makefile (Separate .h/.cpp Files)
# Template-Version: {{TEMPLATE_VERSION}}
# Kompatibel mit: C++17

# Compiler und Flags
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -O2 -I.
DEBUG_FLAGS = -g -DDEBUG -O0
RELEASE_FLAGS = -O3 -DNDEBUG -march=native
PROFILE_FLAGS = -pg -O2

# Dateien
TARGET = test_runner
SOURCES = test_runner.cpp Challenge.cpp Tests.cpp
OBJECTS = $(SOURCES:.cpp=.o)
HEADERS = Challenge.h Tests.h

# Dependencies
DEPS = $(OBJECTS:.o=.d)

# Farben f√ºr Output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
PURPLE = \033[0;35m
CYAN = \033[0;36m
NC = \033[0m # No Color

# Standard-Target
all: $(TARGET)
	@echo "$(GREEN)‚úÖ C++ Template-Challenge erfolgreich kompiliert!$(NC)"
	@echo "$(YELLOW)üìÅ Verwende 'make test' zum Ausf√ºhren der Tests$(NC)"

# Test Runner kompilieren (mit separaten Object-Dateien)
$(TARGET): $(OBJECTS)
	@echo "$(YELLOW)üîó Linke Executable...$(NC)"
	$(CXX) $(CXXFLAGS) -o $(TARGET) $(OBJECTS)
	@echo "$(GREEN)‚úÖ Linking erfolgreich: $(TARGET)$(NC)"

# Object-Dateien kompilieren
%.o: %.cpp $(HEADERS)
	@echo "$(CYAN)üîß Kompiliere $<...$(NC)"
	$(CXX) $(CXXFLAGS) -MMD -MP -c $< -o $@

# Dependencies einbinden
-include $(DEPS)

# Tests ausf√ºhren
test: $(TARGET)
	@echo "$(YELLOW)üß™ F√ºhre C++ Template Tests aus...$(NC)"
	@echo "$(YELLOW)================================================$(NC)"
	./$(TARGET)
	@echo "$(YELLOW)================================================$(NC)"
	@echo "$(GREEN)üéâ Tests abgeschlossen!$(NC)"

# Debug-Version kompilieren
debug: CXXFLAGS += $(DEBUG_FLAGS)
debug: clean $(TARGET)
	@echo "$(PURPLE)üêõ Debug-Version kompiliert$(NC)"
	@echo "$(YELLOW)üí° Verwende 'gdb ./$(TARGET)' zum Debuggen$(NC)"

# Release-Version kompilieren
release: CXXFLAGS += $(RELEASE_FLAGS)
release: clean $(TARGET)
	@echo "$(GREEN)üöÄ Release-Version kompiliert (optimiert)$(NC)"

# Profiling-Version kompilieren
profile: CXXFLAGS += $(PROFILE_FLAGS)
profile: clean $(TARGET)
	@echo "$(BLUE)üìä Profiling-Version kompiliert$(NC)"
	@echo "$(YELLOW)üí° F√ºhre aus und nutze 'gprof ./$(TARGET)' zur Analyse$(NC)"

# Aufr√§umen
clean:
	@echo "$(YELLOW)üßπ R√§ume auf...$(NC)"
	rm -f $(TARGET)
	rm -f $(OBJECTS)
	rm -f $(DEPS)
	rm -f *.exe
	rm -f core
	rm -f gmon.out
	@echo "$(GREEN)‚úÖ Aufger√§umt!$(NC)"

# Deep Clean (auch tempor√§re Editor-Dateien)
distclean: clean
	@echo "$(YELLOW)üóëÔ∏è  Deep Clean...$(NC)"
	rm -f *~
	rm -f *.bak
	rm -f *.tmp
	rm -f .*.swp
	rm -f .*.swo
	@echo "$(GREEN)‚úÖ Deep Clean abgeschlossen!$(NC)"

# Template-Validierung
validate:
	@echo "$(YELLOW)üîç Validiere Template-Struktur...$(NC)"
	@if [ ! -f "Challenge.h" ]; then \
		echo "$(RED)‚ùå Challenge.h fehlt$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "Challenge.cpp" ]; then \
		echo "$(RED)‚ùå Challenge.cpp fehlt$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "Tests.h" ]; then \
		echo "$(RED)‚ùå Tests.h fehlt$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "Tests.cpp" ]; then \
		echo "$(RED)‚ùå Tests.cpp fehlt$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "test_runner.cpp" ]; then \
		echo "$(RED)‚ùå test_runner.cpp fehlt$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f "challenge-info.json" ]; then \
		echo "$(RED)‚ùå challenge-info.json fehlt$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Template-Struktur vollst√§ndig$(NC)"

# Syntax-Check ohne Ausf√ºhrung
check:
	@echo "$(YELLOW)üîç Syntax-Check...$(NC)"
	$(CXX) $(CXXFLAGS) -fsyntax-only $(SOURCES)
	@echo "$(GREEN)‚úÖ Syntax korrekt$(NC)"

# Header-Dependencies pr√ºfen
deps:
	@echo "$(YELLOW)üîç Analysiere Dependencies...$(NC)"
	$(CXX) $(CXXFLAGS) -MM $(SOURCES)

# Code-Formatting (falls clang-format verf√ºgbar)
format:
	@if command -v clang-format >/dev/null 2>&1; then \
		echo "$(YELLOW)üé® Formatiere Code...$(NC)"; \
		clang-format -i *.cpp *.h; \
		echo "$(GREEN)‚úÖ Code formatiert$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  clang-format nicht gefunden - √ºbersprungen$(NC)"; \
	fi

# Code-Linting (falls cppcheck verf√ºgbar)
lint:
	@if command -v cppcheck >/dev/null 2>&1; then \
		echo "$(YELLOW)üîç Code-Analyse mit cppcheck...$(NC)"; \
		cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem *.cpp *.h; \
		echo "$(GREEN)‚úÖ Code-Analyse abgeschlossen$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  cppcheck nicht gefunden - √ºbersprungen$(NC)"; \
	fi

# Memory-Check mit Valgrind (falls verf√ºgbar)
memcheck: debug
	@if command -v valgrind >/dev/null 2>&1; then \
		echo "$(PURPLE)üîç Memory-Check mit Valgrind...$(NC)"; \
		valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(TARGET); \
		echo "$(GREEN)‚úÖ Memory-Check abgeschlossen$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Valgrind nicht gefunden - √ºbersprungen$(NC)"; \
	fi

# Benchmark ausf√ºhren
benchmark: release
	@echo "$(BLUE)üìä F√ºhre Performance-Benchmark aus...$(NC)"
	@for i in 1 2 3 4 5; do \
		echo "$(CYAN)Run $$i:$(NC)"; \
		time ./$(TARGET); \
		echo ""; \
	done
	@echo "$(GREEN)‚úÖ Benchmark abgeschlossen$(NC)"

# Template-Info anzeigen
info:
	@echo "$(YELLOW)üìã C++ Template Challenge Info:$(NC)"
	@echo "   Template-Version: {{TEMPLATE_VERSION}}"
	@echo "   C++ Standard: C++17"
	@echo "   Datei-Struktur: Separate .h/.cpp Files"
	@echo "   Compiler: $(CXX)"
	@echo "   Flags: $(CXXFLAGS)"
	@echo "   Target: $(TARGET)"
	@echo ""
	@echo "$(YELLOW)üìÅ Projekt-Dateien:$(NC)"
	@echo "   Headers: $(HEADERS)"
	@echo "   Sources: $(SOURCES)"
	@echo "   Objects: $(OBJECTS)"
	@echo ""
	@echo "$(YELLOW)üìÇ Verf√ºgbare Dateien:$(NC)"
	@ls -la *.h *.cpp *.json Makefile 2>/dev/null || echo "   Dateien werden erstellt..."
	@echo ""
	@echo "$(YELLOW)üéØ Verf√ºgbare Make-Targets:$(NC)"
	@echo "   make        - Standard kompilierung"
	@echo "   make test   - Kompilieren + Tests ausf√ºhren"
	@echo "   make debug  - Debug-Version (-g -O0)"
	@echo "   make release- Release-Version (-O3 optimiert)"
	@echo "   make profile- Profiling-Version (-pg)"
	@echo "   make clean  - Aufr√§umen"
	@echo "   make distclean - Deep Clean"
	@echo "   make validate- Template validieren"
	@echo "   make check  - Syntax pr√ºfen"
	@echo "   make deps   - Dependencies anzeigen"
	@echo "   make format - Code formatieren (clang-format)"
	@echo "   make lint   - Code-Analyse (cppcheck)"
	@echo "   make memcheck- Memory-Check (valgrind)"
	@echo "   make benchmark- Performance-Test"
	@echo "   make info   - Diese Info anzeigen"

# Installation von Dependencies (falls ben√∂tigt)
install-deps:
	@echo "$(YELLOW)üì¶ Pr√ºfe C++ Dependencies...$(NC)"
	@if ! command -v g++ >/dev/null 2>&1; then \
		echo "$(RED)‚ùå g++ nicht gefunden!$(NC)"; \
		echo "$(YELLOW)üí° Installation:$(NC)"; \
		echo "   Ubuntu/Debian: sudo apt install build-essential"; \
		echo "   CentOS/RHEL:   sudo yum groupinstall 'Development Tools'"; \
		echo "   macOS:         xcode-select --install"; \
		echo "   Windows:       Install MSYS2 or MinGW"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ g++ verf√ºgbar: $$(g++ --version | head -n1)$(NC)"
	@echo "$(YELLOW)üì¶ Optionale Tools pr√ºfen...$(NC)"
	@command -v clang-format >/dev/null 2>&1 && echo "$(GREEN)‚úÖ clang-format verf√ºgbar$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  clang-format nicht verf√ºgbar$(NC)"
	@command -v cppcheck >/dev/null 2>&1 && echo "$(GREEN)‚úÖ cppcheck verf√ºgbar$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  cppcheck nicht verf√ºgbar$(NC)"
	@command -v valgrind >/dev/null 2>&1 && echo "$(GREEN)‚úÖ valgrind verf√ºgbar$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  valgrind nicht verf√ºgbar$(NC)"
	@command -v gdb >/dev/null 2>&1 && echo "$(GREEN)‚úÖ gdb verf√ºgbar$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  gdb nicht verf√ºgbar$(NC)"

# Help-Target
help: info

# Assembly-Output generieren (f√ºr Optimierungs-Analyse)
asm:
	@echo "$(CYAN)üîß Generiere Assembly-Output...$(NC)"
	$(CXX) $(CXXFLAGS) -S -fverbose-asm -o Challenge.s Challenge.cpp
	@echo "$(GREEN)‚úÖ Assembly in Challenge.s generiert$(NC)"

# Preprocessor-Output generieren
preprocess:
	@echo "$(CYAN)üîß Generiere Preprocessor-Output...$(NC)"
	$(CXX) $(CXXFLAGS) -E -o Challenge.i Challenge.cpp
	@echo "$(GREEN)‚úÖ Preprocessor-Output in Challenge.i generiert$(NC)"

# Object-File-Info anzeigen
objdump: $(OBJECTS)
	@echo "$(CYAN)üîç Object-File Informationen:$(NC)"
	@for obj in $(OBJECTS); do \
		echo "$(YELLOW)--- $$obj ---$(NC)"; \
		objdump -t $$obj | head -20; \
		echo ""; \
	done

# Gr√∂√üe der generierten Dateien anzeigen
size: $(TARGET)
	@echo "$(CYAN)üìè Datei-Gr√∂√üen:$(NC)"
	@echo "$(YELLOW)Executable:$(NC)"
	@ls -lh $(TARGET)
	@echo "$(YELLOW)Object Files:$(NC)"
	@ls -lh $(OBJECTS)
	@echo "$(YELLOW)Gr√∂√üen-Details:$(NC)"
	@size $(TARGET)

# Phony targets (keine echten Dateien)
.PHONY: all test debug release profile clean distclean validate check deps format lint memcheck benchmark info help install-deps asm preprocess objdump size

# Default-Target falls nichts angegeben
.DEFAULT_GOAL := all

# Automatische Abh√§ngigkeiten f√ºr bessere Builds
.PRECIOUS: %.o

# Parallelisierung aktivieren falls unterst√ºtzt
MAKEFLAGS += -j$(shell nproc 2>/dev/null || echo 1)

# Verbose Output bei V=1
ifeq ($(V),1)
	Q :=
else
	Q := @
endif
