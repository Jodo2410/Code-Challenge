//===============================================================================
// FIXED vulnerabilityscanner.h - Add missing includes and function declarations
//===============================================================================

#ifndef VULNERABILITYSCANNER_H
#define VULNERABILITYSCANNER_H

#include <QtCore/QObject>
#include <QtCore/QRunnable>
#include <QtCore/QThread>
#include <QtCore/QElapsedTimer>
#include <QtCore/QDateTime>
#include <QtCore/QJsonObject>
#include <QtCore/QJsonArray>
#include <QtCore/QStringList>
#include <QtCore/QMap>
#include <QtCore/QTimer>
#include <QtNetwork/QTcpSocket>
#include <QtNetwork/QSslSocket>
#include <QtNetwork/QSslCertificate>
#include <QtNetwork/QSslCipher>        // *** FIXED: Added missing include ***
#include <QtNetwork/QSslError>
#include <QtNetwork/QHostInfo>
#include <QtCore/QRegularExpression>
#include <QtCore/QCryptographicHash>

// Vulnerability severity levels
enum class VulnSeverity {
    CRITICAL = 5,
    HIGH = 4,
    MEDIUM = 3,
    LOW = 2,
    INFO = 1
};

// Vulnerability information structure
struct VulnerabilityInfo {
    QString id;                 // CVE-ID or custom ID
    QString title;              // Vulnerability title
    QString description;        // Detailed description
    VulnSeverity severity;      // Severity level
    QString service;            // Affected service
    int port;                   // Affected port
    QString evidence;           // Proof of vulnerability
    QString recommendation;     // Fix recommendation
    QDateTime discovered;       // When found
    QString cveScore;          // CVSS score if available
    QStringList references;     // Related links/CVEs
    bool exploitable;          // Can be exploited
    QString exploitMethod;     // How to exploit
};

// Security assessment summary
struct SecurityAssessment {
    QString targetIp;
    QString hostname;
    QDateTime scanTime;
    int totalVulnerabilities;
    int criticalCount;
    int highCount;
    int mediumCount;
    int lowCount;
    int infoCount;
    QList<VulnerabilityInfo> vulnerabilities;
    QString overallRisk;       // CRITICAL, HIGH, MEDIUM, LOW
    int securityScore;         // 0-100 score
    QStringList openPorts;
    QStringList runningServices;
    bool hasWeakCredentials;
    bool hasUnencryptedServices;
    bool hasOutdatedSoftware;
    QString operatingSystem;
};

// Main Vulnerability Scanner Worker
class VulnerabilityScanner : public QObject, public QRunnable
{
    Q_OBJECT

public:
    explicit VulnerabilityScanner(const QString &targetIp, QObject *parent = nullptr);
    explicit VulnerabilityScanner(const QStringList &targetIps, QObject *parent = nullptr);

    void run() override;

    // Configuration methods
    void setPortRange(const QList<int> &ports);
    void enableCredentialTesting(bool enable);
    void enableSSLTesting(bool enable);
    void enableServiceTesting(bool enable);
    void setTimeout(int timeoutMs);
    void setThreadSafe(bool threadSafe);

signals:
    // Progress signals
    void scanStarted(const QString &target);
    void scanProgress(const QString &target, int percentage);
    void scanCompleted(const QString &target);

    // Vulnerability discovery signals
    void vulnerabilityFound(const QString &target, const VulnerabilityInfo &vuln);
    void assessmentComplete(const SecurityAssessment &assessment);

    // Detailed test results
    void portScanComplete(const QString &target, const QStringList &openPorts);
    void serviceScanComplete(const QString &target, const QMap<int, QString> &services);
    void credentialTestComplete(const QString &target, const QStringList &weakCredentials);
    void sslTestComplete(const QString &target, const QList<VulnerabilityInfo> &sslVulns);

    // Status updates
    void statusUpdate(const QString &target, const QString &message);
    void errorOccurred(const QString &target, const QString &error);

private slots:
    void handleSslErrors(const QList<QSslError> &errors);

private:
    // Core scanning methods
    void scanSingleTarget(const QString &ip);
    SecurityAssessment performComprehensiveScan(const QString &ip);

    // Service discovery
    QStringList discoverOpenPorts(const QString &ip);
    QMap<int, QString> identifyServices(const QString &ip, const QStringList &ports);
    QString detectOperatingSystem(const QString &ip);

    // Vulnerability testing modules
    QList<VulnerabilityInfo> testCommonVulnerabilities(const QString &ip);
    QList<VulnerabilityInfo> testSSLVulnerabilities(const QString &ip, int port = 443);
    QList<VulnerabilityInfo> testWeakCredentials(const QString &ip);
    QList<VulnerabilityInfo> testServiceVulnerabilities(const QString &ip, const QMap<int, QString> &services);
    QList<VulnerabilityInfo> testNetworkVulnerabilities(const QString &ip);

    // *** FIXED: Added missing SSL vulnerability test declarations ***
    bool testHeartbleed(const QString &ip, int port);                    // Fixed return type
    bool testPoodleSSL(const QString &ip, int port);
    bool testWeakSSLCiphers(const QString &ip, int port);
    bool testExpiredCertificates(const QString &ip, int port);
    bool testSelfSignedCertificates(const QString &ip, int port);
    bool testSSLv2Support(const QString &ip, int port);                 // Added missing declaration
    bool testSSLv3Support(const QString &ip, int port);                 // Added missing declaration
    bool testTLS10Support(const QString &ip, int port);                 // Added missing declaration

    // *** FIXED: Added missing credential testing declarations ***
    bool testDefaultCredentials(const QString &ip, int port, const QString &service);
    bool testWeakPasswords(const QString &ip, int port, const QString &service);
    bool testAnonymousAccess(const QString &ip, int port, const QString &service);

    // Service-specific credential testing - Added missing declarations
    bool testSSHCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testFTPCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testTelnetCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testSMBCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testHTTPCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testSNMPCommunity(const QString &ip, int port, const QString &community);

    // Service-specific tests
    bool testSMBVulnerabilities(const QString &ip);
    bool testFTPVulnerabilities(const QString &ip);
    bool testSSHVulnerabilities(const QString &ip);
    bool testHTTPVulnerabilities(const QString &ip, int port);
    bool testSNMPVulnerabilities(const QString &ip);
    bool testDNSVulnerabilities(const QString &ip);

    // Utility methods
    QString calculateSecurityScore(const QList<VulnerabilityInfo> &vulnerabilities);
    QString determineOverallRisk(const QList<VulnerabilityInfo> &vulnerabilities);
    VulnerabilityInfo createVulnerability(const QString &id, const QString &title,
                                          VulnSeverity severity, const QString &service,
                                          int port, const QString &evidence);
    bool connectToService(const QString &ip, int port, int timeout = 3000);
    QString grabServiceBanner(const QString &ip, int port);
    bool sendCommand(QTcpSocket *socket, const QString &command, QString &response);

    // Data members
    QStringList targetIps;
    QList<int> portRange;
    bool enableCredentialTests;
    bool enableSSLTests;
    bool enableServiceTests;
    int connectionTimeout;
    bool threadSafeMode;

    // Default port ranges for common services
    static const QMap<QString, QList<int>> commonServicePorts;
    static const QMap<QString, QStringList> defaultCredentials;
    static const QStringList weakPasswords;
    static const QStringList commonUsernames;
};

// SSL/TLS specific vulnerability scanner
class SSLVulnerabilityScanner : public QObject, public QRunnable
{
    Q_OBJECT

public:
    explicit SSLVulnerabilityScanner(const QString &ip, int port = 443, QObject *parent = nullptr);
    void run() override;

signals:
    void sslVulnerabilityFound(const QString &ip, int port, const VulnerabilityInfo &vuln);
    void sslScanComplete(const QString &ip, int port, const QList<VulnerabilityInfo> &vulnerabilities);

private:
    QString targetIp;
    int targetPort;

    // SSL-specific tests
    bool testSSLv2Support(const QString &ip, int port);
    bool testSSLv3Support(const QString &ip, int port);
    bool testTLS10Support(const QString &ip, int port);
    bool testWeakCiphers(const QString &ip, int port);
    bool testCertificateValidation(const QString &ip, int port);
    QStringList getAvailableCiphers(const QString &ip, int port);
    QSslCertificate getCertificate(const QString &ip, int port);
};

// Credential testing module
class CredentialTester : public QObject, public QRunnable
{
    Q_OBJECT

public:
    explicit CredentialTester(const QString &ip, const QString &service, int port, QObject *parent = nullptr);
    void run() override;

    void addCredentialPair(const QString &username, const QString &password);
    void loadCommonCredentials();

signals:
    void credentialFound(const QString &ip, int port, const QString &service,
                         const QString &username, const QString &password);
    void credentialTestComplete(const QString &ip, int port, int testedCount, int foundCount);

private:
    QString targetIp;
    QString serviceName;
    int targetPort;
    QList<QPair<QString, QString>> credentials;

    // Service-specific credential testing
    bool testSSHCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testFTPCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testTelnetCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testSMBCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testHTTPCredentials(const QString &ip, int port, const QString &user, const QString &pass);
    bool testSNMPCommunity(const QString &ip, int port, const QString &community);
};

// Exploit testing module (ethical testing only)
class ExploitTester : public QObject, public QRunnable
{
    Q_OBJECT

public:
    explicit ExploitTester(const QString &ip, const VulnerabilityInfo &vulnerability, QObject *parent = nullptr);
    void run() override;

signals:
    void exploitTestResult(const QString &ip, const QString &vulnId, bool exploitable, const QString &proof);

private:
    QString targetIp;
    VulnerabilityInfo targetVuln;

    // Safe exploit testing methods
    bool testBufferOverflow(const QString &ip, int port);
    bool testSQLInjection(const QString &ip, int port);
    bool testDirectoryTraversal(const QString &ip, int port);
    bool testCommandInjection(const QString &ip, int port);
};

// Vulnerability database and knowledge base
class VulnerabilityDatabase : public QObject
{
    Q_OBJECT

public:
    static VulnerabilityDatabase* instance();

    // Vulnerability lookup
    VulnerabilityInfo lookupVulnerability(const QString &cveId);
    QList<VulnerabilityInfo> getVulnerabilitiesForService(const QString &service, const QString &version);

    // Database management
    void updateDatabase();
    void loadLocalDatabase();
    void addCustomVulnerability(const VulnerabilityInfo &vuln);

    // Pattern matching for known vulnerabilities
    QList<VulnerabilityInfo> matchBannerVulnerabilities(const QString &banner);
    QList<VulnerabilityInfo> matchVersionVulnerabilities(const QString &service, const QString &version);

signals:
    void databaseUpdated();
    void updateProgress(int percentage);

private:
    explicit VulnerabilityDatabase(QObject *parent = nullptr);
    static VulnerabilityDatabase *m_instance;

    QMap<QString, VulnerabilityInfo> vulnerabilityMap;
    QMap<QString, QStringList> serviceVulnerabilities;

    void initializeDefaultVulnerabilities();
    void loadCVEDatabase();
};

#endif // VULNERABILITYSCANNER_H

