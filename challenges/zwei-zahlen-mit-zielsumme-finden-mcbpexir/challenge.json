{
  "id": "zwei-zahlen-mit-zielsumme-finden-mcbpexir",
  "title": "Zwei Zahlen mit Zielsumme finden",
  "description": "Gegeben ist ein Array von Ganzzahlen `nums` und eine Ganzzahl `target`. Schreibe eine Funktion, die überprüft, ob es zwei unterschiedliche Elemente im Array gibt, deren Summe genau `target` ergibt. Gib `true` zurück, wenn ein solches Paar existiert, andernfalls `false`.\n\n**Beispiele:**\n\nEingabe: nums = [2, 7, 11, 15], target = 9  \nAusgabe: true  (2 + 7 = 9)\n\nEingabe: nums = [1, 2, 3, 4], target = 8  \nAusgabe: false\n\nEingabe: nums = [-1, 5, 3, 6], target = 4  \nAusgabe: true  (-1 + 5 = 4)",
  "difficulty": "medium",
  "language": "csharp",
  "tags": [
    "arrays",
    "hashset",
    "two-pointers",
    "algorithmus",
    "csharp",
    "medium"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-25T08:40:13.318Z",
  "status": "approved",
  "starterCode": "using System;\nusing System.Collections.Generic;\n\npublic static class Solution {\n    public static bool HasPairWithSum(int[] nums, int target) {\n        // TODO: Implementiere die Logik zur Suche eines Zahlenpaars\n        return false;\n    }\n}",
  "solution": "using System;\nusing System.Collections.Generic;\n\npublic static class Solution {\n    public static bool HasPairWithSum(int[] nums, int target) {\n        HashSet<int> seen = new HashSet<int>();\n        foreach (int num in nums) {\n            int complement = target - num;\n            if (seen.Contains(complement)) {\n                return true;\n            }\n            seen.Add(num);\n        }\n        return false;\n    }\n}",
  "tests": "using System;\n\npublic static class Tests {\n    public static void RunTests() {\n        int passed = 0;\n        int total = 5;\n\n        if (Solution.HasPairWithSum(new int[] { 2, 7, 11, 15 }, 9)) {\n            Console.WriteLine(\"Test 1 bestanden ✓\");\n            passed++;\n        } else {\n            Console.WriteLine(\"Test 1 fehlgeschlagen ✗\");\n        }\n\n        if (!Solution.HasPairWithSum(new int[] { 1, 2, 3, 4 }, 8)) {\n            Console.WriteLine(\"Test 2 bestanden ✓\");\n            passed++;\n        } else {\n            Console.WriteLine(\"Test 2 fehlgeschlagen ✗\");\n        }\n\n        if (Solution.HasPairWithSum(new int[] { -1, 5, 3, 6 }, 4)) {\n            Console.WriteLine(\"Test 3 bestanden ✓\");\n            passed++;\n        } else {\n            Console.WriteLine(\"Test 3 fehlgeschlagen ✗\");\n        }\n\n        if (Solution.HasPairWithSum(new int[] { 0, 4, 3, 0 }, 0)) {\n            Console.WriteLine(\"Test 4 bestanden ✓\");\n            passed++;\n        } else {\n            Console.WriteLine(\"Test 4 fehlgeschlagen ✗\");\n        }\n\n        if (!Solution.HasPairWithSum(new int[] { 1 }, 1)) {\n            Console.WriteLine(\"Test 5 bestanden ✓\");\n            passed++;\n        } else {\n            Console.WriteLine(\"Test 5 fehlgeschlagen ✗\");\n        }\n\n        Console.WriteLine($\"{passed}/{total} Tests bestanden\");\n    }\n}",
  "testClassName": "Tests",
  "mainClassName": "ZweiZahlenMitZielsummeFinden",
  "functionName": "ZweiZahlenMitZielsummeFinden"
}