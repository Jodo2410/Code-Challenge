{
  "id": "berpr-fe-ob-ein-string-ein-palindrom-ist-mcbjjbjx",
  "title": "Überprüfe, ob ein String ein Palindrom ist",
  "description": "Schreibe eine Funktion in C++, die überprüft, ob ein gegebener String ein Palindrom ist. Ein Palindrom ist ein Wort oder Satz, das/der vorwärts und rückwärts gelesen gleich ist. Dabei sollen nur Buchstaben beachtet und Groß-/Kleinschreibung ignoriert werden.\n\n**Beispiele:**\n\nEingabe: \"Lagerregal\"\nAusgabe: true\n\nEingabe: \"Otto\"\nAusgabe: true\n\nEingabe: \"Hallo\"\nAusgabe: false\n\nEingabe: \"Reliefpfeiler\"\nAusgabe: true",
  "difficulty": "easy",
  "language": "cpp",
  "tags": [
    "strings",
    "palindrome",
    "einsteiger",
    "cpp",
    "easy"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-25T05:55:40.430Z",
  "status": "approved",
  "starterCode": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool isPalindrome(string s) {\n    // TODO: Implementiere hier die Logik\n    return false;\n}\n\nint main() {\n    return 0;\n}",
  "solution": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool isPalindrome(string s) {\n    string cleaned;\n    for (char c : s) {\n        if (isalpha(c)) {\n            cleaned += tolower(c);\n        }\n    }\n    string reversed = cleaned;\n    reverse(reversed.begin(), reversed.end());\n    return cleaned == reversed;\n}\n\nint main() {\n    vector<string> tests = {\"Lagerregal\", \"Otto\", \"Hallo\", \"Reliefpfeiler\", \"Test\"};\n    for (string t : tests) {\n        cout << \"\\\"\" << t << \"\\\" ist Palindrom? \" << (isPalindrome(t) ? \"true\" : \"false\") << endl;\n    }\n    return 0;\n}",
  "tests": "#include <cassert>\n#include <string>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool isPalindrome(string s) {\n    string cleaned;\n    for (char c : s) {\n        if (isalpha(c)) {\n            cleaned += tolower(c);\n        }\n    }\n    string reversed = cleaned;\n    reverse(reversed.begin(), reversed.end());\n    return cleaned == reversed;\n}\n\nint main() {\n    assert(isPalindrome(\"Lagerregal\") == true);\n    assert(isPalindrome(\"Otto\") == true);\n    assert(isPalindrome(\"Hallo\") == false);\n    assert(isPalindrome(\"Reliefpfeiler\") == true);\n    assert(isPalindrome(\"Test\") == false);\n    cout << \"Alle Tests erfolgreich bestanden.\" << endl;\n    return 0;\n}",
  "testClassName": "Tests",
  "mainClassName": "BerprfeObEinStringEinPalindromIst",
  "functionName": "berprfeObEinStringEinPalindromIst"
}