{
  "id": "anagramm-pr-fer-mcbt5cg4",
  "title": "Anagramm-Pr√ºfer",
  "description": "Implementiere eine Funktion, die pr√ºft, ob zwei Strings Anagramme voneinander sind. Ein Anagramm ist ein Wort, das durch Umstellen der Buchstaben eines anderen Wortes entsteht, wobei alle Buchstaben genau einmal verwendet werden.\n\nBeispiele:\n\n```\n\"listen\" und \"silent\" -> true (sind Anagramme)\n\"hello\" und \"world\" -> false (sind keine Anagramme)\n\"anagram\" und \"nagaram\" -> true (sind Anagramme)\n\"rat\" und \"car\" -> false (sind keine Anagramme)\n\"Debit Card\" und \"Bad Credit\" -> true (Gro√übuchstaben und Leerzeichen werden ignoriert)\n```\n\nAnforderungen:\n- Die Funktion soll unempfindlich gegen√ºber Gro√ü- und Kleinschreibung sein\n- Leerzeichen und Sonderzeichen sollen ignoriert werden\n- Eine leere Zeichenkette ist ein Anagramm einer leeren Zeichenkette",
  "difficulty": "easy",
  "language": "csharp",
  "tags": [
    "strings",
    "hash-table",
    "character-counting",
    "csharp",
    "easy",
    "algorithms"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-25T10:24:44.619Z",
  "status": "approved",
  "starterCode": "using System;\nusing System.Collections.Generic;\n\npublic class AnagramChecker\n{\n    /// <summary>\n    /// Pr√ºft, ob zwei Strings Anagramme voneinander sind.\n    /// Ein Anagramm ist ein Wort, das durch Umstellen der Buchstaben eines anderen Wortes entsteht.\n    /// Die Funktion ignoriert Gro√ü- und Kleinschreibung, Leerzeichen und Sonderzeichen.\n    /// </summary>\n    /// <param name=\"s\">Der erste String</param>\n    /// <param name=\"t\">Der zweite String</param>\n    /// <returns>True, wenn die Strings Anagramme sind, sonst False</returns>\n    public static bool IsAnagram(string s, string t)\n    {\n        // TODO: Implementiere deine L√∂sung hier\n        throw new NotImplementedException();\n    }\n}",
  "solution": "using System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\npublic class AnagramChecker\n{\n    /// <summary>\n    /// Pr√ºft, ob zwei Strings Anagramme voneinander sind.\n    /// Ein Anagramm ist ein Wort, das durch Umstellen der Buchstaben eines anderen Wortes entsteht.\n    /// Die Funktion ignoriert Gro√ü- und Kleinschreibung, Leerzeichen und Sonderzeichen.\n    /// </summary>\n    /// <param name=\"s\">Der erste String</param>\n    /// <param name=\"t\">Der zweite String</param>\n    /// <returns>True, wenn die Strings Anagramme sind, sonst False</returns>\n    public static bool IsAnagram(string s, string t)\n    {\n        // Sonderfall: Beide Strings sind null oder leer\n        if (string.IsNullOrEmpty(s) && string.IsNullOrEmpty(t))\n        {\n            return true;\n        }\n        \n        // Sonderfall: Nur einer der Strings ist null oder leer\n        if (string.IsNullOrEmpty(s) || string.IsNullOrEmpty(t))\n        {\n            return false;\n        }\n        \n        // Entferne alle Nicht-Buchstaben und konvertiere zu Kleinbuchstaben\n        string cleanS = Regex.Replace(s.ToLower(), \"[^a-z]\", \"\");\n        string cleanT = Regex.Replace(t.ToLower(), \"[^a-z]\", \"\");\n        \n        // Wenn die bereinigten Strings unterschiedliche L√§ngen haben, k√∂nnen sie keine Anagramme sein\n        if (cleanS.Length != cleanT.Length)\n        {\n            return false;\n        }\n        \n        // Z√§hle die H√§ufigkeit jedes Buchstabens in beiden Strings\n        Dictionary<char, int> charCount = new Dictionary<char, int>();\n        \n        // Z√§hle Buchstaben im ersten String\n        foreach (char c in cleanS)\n        {\n            if (charCount.ContainsKey(c))\n            {\n                charCount[c]++;\n            }\n            else\n            {\n                charCount[c] = 1;\n            }\n        }\n        \n        // Subtrahiere Buchstaben im zweiten String\n        foreach (char c in cleanT)\n        {\n            if (!charCount.ContainsKey(c))\n            {\n                // Wenn ein Buchstabe im zweiten String vorkommt, der nicht im ersten ist\n                return false;\n            }\n            \n            charCount[c]--;\n            \n            if (charCount[c] < 0)\n            {\n                // Wenn ein Buchstabe im zweiten String √∂fter vorkommt als im ersten\n                return false;\n            }\n        }\n        \n        // Pr√ºfe, ob alle Buchstaben vollst√§ndig abgeglichen wurden\n        foreach (var count in charCount.Values)\n        {\n            if (count != 0)\n            {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}",
  "tests": "using System;\n\npublic class Tests\n{\n    private static int testsPassed = 0;\n    private static int totalTests = 0;\n\n    public static void RunAllTests()\n    {\n        Console.WriteLine(\"üß™ Starte Tests f√ºr: Anagramm-Pr√ºfer\");\n        Console.WriteLine(new string('=', 50));\n\n        TestBasicAnagrams();\n        TestNonAnagrams();\n        TestCaseSensitivity();\n        TestIgnoreNonLetters();\n        TestEmptyAndNullStrings();\n        TestUnicodeCharacters();\n        TestLongStrings();\n\n        Console.WriteLine($\"\\n{testsPassed}/{totalTests} Tests bestanden\");\n        \n        if (testsPassed == totalTests)\n        {\n            Console.WriteLine(\"üéâ Alle Tests bestanden!\");\n        }\n        else\n        {\n            Console.WriteLine(\"‚ùå Einige Tests fehlgeschlagen.\");\n            Environment.Exit(1);\n        }\n    }\n\n    private static void TestBasicAnagrams()\n    {\n        Test(\"Einfache Anagramme\", () => {\n            AssertEqual(true, AnagramChecker.IsAnagram(\"listen\", \"silent\"), \"'listen' und 'silent' sollten Anagramme sein\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"anagram\", \"nagaram\"), \"'anagram' und 'nagaram' sollten Anagramme sein\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"triangle\", \"integral\"), \"'triangle' und 'integral' sollten Anagramme sein\");\n        });\n    }\n\n    private static void TestNonAnagrams()\n    {\n        Test(\"Keine Anagramme\", () => {\n            AssertEqual(false, AnagramChecker.IsAnagram(\"hello\", \"world\"), \"'hello' und 'world' sollten keine Anagramme sein\");\n            AssertEqual(false, AnagramChecker.IsAnagram(\"rat\", \"car\"), \"'rat' und 'car' sollten keine Anagramme sein\");\n            AssertEqual(false, AnagramChecker.IsAnagram(\"abc\", \"abcd\"), \"'abc' und 'abcd' sollten keine Anagramme sein (unterschiedliche L√§nge)\");\n        });\n    }\n\n    private static void TestCaseSensitivity()\n    {\n        Test(\"Gro√ü- und Kleinschreibung ignorieren\", () => {\n            AssertEqual(true, AnagramChecker.IsAnagram(\"Listen\", \"Silent\"), \"'Listen' und 'Silent' sollten Anagramme sein (Gro√ü-/Kleinschreibung ignorieren)\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"ANAGRAM\", \"nagaram\"), \"'ANAGRAM' und 'nagaram' sollten Anagramme sein (Gro√ü-/Kleinschreibung ignorieren)\");\n        });\n    }\n\n    private static void TestIgnoreNonLetters()\n    {\n        Test(\"Leerzeichen und Sonderzeichen ignorieren\", () => {\n            AssertEqual(true, AnagramChecker.IsAnagram(\"Debit Card\", \"Bad Credit\"), \"'Debit Card' und 'Bad Credit' sollten Anagramme sein (Leerzeichen ignorieren)\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"astronomer\", \"moon starer\"), \"'astronomer' und 'moon starer' sollten Anagramme sein (Leerzeichen ignorieren)\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"The Morse Code\", \"Here comes dots\"), \"'The Morse Code' und 'Here comes dots' sollten Anagramme sein\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"Dormitory\", \"Dirty Room!\"), \"'Dormitory' und 'Dirty Room!' sollten Anagramme sein (Sonderzeichen ignorieren)\");\n        });\n    }\n\n    private static void TestEmptyAndNullStrings()\n    {\n        Test(\"Leere und null Strings\", () => {\n            AssertEqual(true, AnagramChecker.IsAnagram(\"\", \"\"), \"Zwei leere Strings sollten Anagramme sein\");\n            AssertEqual(true, AnagramChecker.IsAnagram(null, null), \"Zwei null-Strings sollten Anagramme sein\");\n            AssertEqual(false, AnagramChecker.IsAnagram(\"\", \"a\"), \"Ein leerer String und ein nicht-leerer String sollten keine Anagramme sein\");\n            AssertEqual(false, AnagramChecker.IsAnagram(null, \"a\"), \"Ein null-String und ein nicht-null-String sollten keine Anagramme sein\");\n        });\n    }\n\n    private static void TestUnicodeCharacters()\n    {\n        Test(\"Unicode-Zeichen\", () => {\n            // Nur Buchstaben werden ber√ºcksichtigt, daher sollten folgende Beispiele Anagramme sein\n            AssertEqual(true, AnagramChecker.IsAnagram(\"abc123\", \"cba456\"), \"'abc123' und 'cba456' sollten Anagramme sein (Zahlen ignorieren)\");\n            AssertEqual(true, AnagramChecker.IsAnagram(\"abc!@#\", \"cba$%^\"), \"'abc!@#' und 'cba$%^' sollten Anagramme sein (Sonderzeichen ignorieren)\");\n        });\n    }\n\n    private static void TestLongStrings()\n    {\n        Test(\"Lange Strings\", () => {\n            string longString1 = \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\";\n            string longString2 = \"zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba\";\n            AssertEqual(true, AnagramChecker.IsAnagram(longString1, longString2), \"Lange Strings sollten korrekt als Anagramme erkannt werden\");\n        });\n    }\n\n    private static void Test(string description, Action testAction)\n    {\n        totalTests++;\n        try\n        {\n            testAction();\n            Console.WriteLine($\"  ‚úÖ {description}\");\n            testsPassed++;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"  ‚ùå {description}: {ex.Message}\");\n        }\n    }\n\n    private static void AssertEqual<T>(T expected, T actual, string message = null)\n    {\n        if (!Equals(expected, actual))\n        {\n            throw new Exception($\"{message ?? \"\"}\\nErwartet: {expected}, Erhalten: {actual}\");\n        }\n    }\n}",
  "testClassName": "Tests",
  "mainClassName": "Anagrammprfer",
  "functionName": "Anagrammprfer",
  "reportedIssueNumber": 67,
  "reportedIssueUrl": "https://github.com/Jodo2410/Code-Challenge/issues/67",
  "isHidden": true
}
