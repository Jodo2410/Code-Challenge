{
  "id": "morsecode-konverter-mceiynop",
  "title": "Morsecode-Konverter",
  "description": "### Einführung:\nMorsecode ist eine Methode, bei der Buchstaben durch Punkte (.) und Striche (-) codiert werden. Zwischen Buchstaben steht ein Leerzeichen, zwischen Wörtern ein \" / \".\n\n### Aufgabe:\nImplementiere zwei Methoden:\n- `ToMorse(string input)` — wandelt einen Text in Morsecode um\n- `FromMorse(string morse)` — dekodiert Morsecode in normalen Text\n\nVerwende nur Großbuchstaben (A-Z) und Ziffern (0-9). Andere Zeichen können ignoriert werden.\n\n### Beispiel:\n```csharp\nToMorse(\"HELLO\") => \".... . .-.. .-.. ---\"\nFromMorse(\".... . .-.. .-.. ---\") => \"HELLO\"\nToMorse(\"HELLO WORLD\") => \".... . .-.. .-.. --- / .-- --- .-. .-.. -..\"\n```",
  "difficulty": "easy",
  "language": "csharp",
  "tags": [
    "csharp",
    "strings",
    "morse",
    "text",
    "konvertierung",
    "easy"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-27T08:02:55.088Z",
  "status": "approved",
  "starterCode": "using System;\nusing System.Collections.Generic;\n\npublic static class MorseCodeConverter\n{\n    private static readonly Dictionary<char, string> MorseTable = new Dictionary<char, string>()\n    {\n        // TODO: Füge hier das Morsealphabet hinzu (z.B. {'A', \".-\"})\n    };\n\n    public static string ToMorse(string input)\n    {\n        // TODO: Implementiere Konvertierung von Text zu Morsecode\n        return \"\";\n    }\n\n    public static string FromMorse(string morse)\n    {\n        // TODO: Implementiere Rückkonvertierung von Morsecode zu Text\n        return \"\";\n    }\n}",
  "solution": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\npublic static class MorseCodeConverter\n{\n    private static readonly Dictionary<char, string> MorseTable = new Dictionary<char, string>()\n    {\n        {'A', \".-\"}, {'B', \"-...\"}, {'C', \"-.-.\"}, {'D', \"-..\"}, {'E', \".\"},\n        {'F', \"..-.\"}, {'G', \"--.\"}, {'H', \"....\"}, {'I', \"..\"}, {'J', \".---\"},\n        {'K', \"-.-\"}, {'L', \".-..\"}, {'M', \"--\"}, {'N', \"-.\"}, {'O', \"---\"},\n        {'P', \".--.\"}, {'Q', \"--.-\"}, {'R', \".-.\"}, {'S', \"...\"}, {'T', \"-\"},\n        {'U', \"..-\"}, {'V', \"...-\"}, {'W', \".--\"}, {'X', \"-..-\"}, {'Y', \"-.--\"}, {'Z', \"--..\"},\n        {'0', \"-----\"}, {'1', \".----\"}, {'2', \"..---\"}, {'3', \"...--\"}, {'4', \"....-\"},\n        {'5', \".....\"}, {'6', \"-....\"}, {'7', \"--...\"}, {'8', \"---..\"}, {'9', \"----.\"}\n    };\n\n    public static string ToMorse(string input)\n    {\n        input = input.ToUpper();\n        var sb = new StringBuilder();\n        foreach (char c in input)\n        {\n            if (c == ' ')\n            {\n                sb.Append(\" / \");\n            }\n            else if (MorseTable.ContainsKey(c))\n            {\n                sb.Append(MorseTable[c] + \" \");\n            }\n        }\n        return sb.ToString().Trim();\n    }\n\n    public static string FromMorse(string morse)\n    {\n        var reverseTable = new Dictionary<string, char>();\n        foreach (var kv in MorseTable)\n            reverseTable[kv.Value] = kv.Key;\n\n        var words = morse.Split(new[] {\" / \"}, StringSplitOptions.None);\n        var result = new StringBuilder();\n\n        foreach (string word in words)\n        {\n            var letters = word.Split(' ');\n            foreach (string letter in letters)\n            {\n                if (reverseTable.ContainsKey(letter))\n                    result.Append(reverseTable[letter]);\n            }\n            result.Append(' ');\n        }\n\n        return result.ToString().Trim();\n    }\n}",
  "tests": "using System;\n\npublic static class MorseCodeTests\n{\n    public static void RunAllTests()\n    {\n        int passed = 0;\n        int total = 3;\n        Console.WriteLine(\"=== Morsecode Tests ===\\n\");\n\n        if (Test(\"ToMorse 'HELLO'\", MorseCodeConverter.ToMorse(\"HELLO\"), \".... . .-.. .-.. ---\")) passed++;\n        if (Test(\"ToMorse 'HELLO WORLD'\", MorseCodeConverter.ToMorse(\"HELLO WORLD\"), \".... . .-.. .-.. --- / .-- --- .-. .-.. -..\")) passed++;\n        if (Test(\"FromMorse back to 'HELLO'\", MorseCodeConverter.FromMorse(\".... . .-.. .-.. ---\"), \"HELLO\")) passed++;\n\n        Console.WriteLine($\"\\n{passed}/{total} Tests bestanden\");\n    }\n\n    private static bool Test(string name, string actual, string expected)\n    {\n        bool success = actual == expected;\n        Console.WriteLine(success ? $\"[PASS] {name}\" : $\"[FAIL] {name} | Erwartet: '{expected}', Erhalten: '{actual}'\");\n        return success;\n    }\n}",
  "testClassName": "Tests",
  "mainClassName": "Morsecodekonverter",
  "functionName": "Morsecodekonverter"
}