{
  "id": "two-sum-problem-mcavmh6t",
  "title": "Two Sum Problem",
  "description": "√úberpr√ºfe, ob ein gegebener String ein Palindrom ist. Ignoriere dabei Leerzeichen, Interpunktion und Gro√ü-/Kleinschreibung.",
  "difficulty": "easy",
  "language": "csharp",
  "tags": [
    "arrays",
    "hashtable"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-24T18:46:16.943Z",
  "status": "defective",
  "starterCode": "using System;\n\npublic class TwoSum\n{\n    /// <summary>\n    /// Findet zwei Indizes im Array, deren Werte zusammen das Ziel ergeben\n    /// </summary>\n    /// <param name=\"nums\">Array von Ganzzahlen</param>\n    /// <param name=\"target\">Zielzahl</param>\n    /// <returns>Array mit zwei Indizes</returns>\n    public static int[] FindTwoSum(int[] nums, int target)\n    {\n        // TODO: Implementiere deine L√∂sung hier\n        // Tipp: Verwende eine Hashtable f√ºr O(n) Zeitkomplexit√§t\n        \n        throw new NotImplementedException();\n    }\n}",
  "solution": "/* \n * üìñ REFERENZ-L√ñSUNG - NUR ZUM ANSCHAUEN!\n * \n * Diese Datei wird beim Build IGNORIERT und dient nur als Referenz.\n * Arbeite in der starter.cs Datei f√ºr deine eigene Implementation.\n * \n * Tipp: Vergleiche deine L√∂sung mit dieser nachdem du fertig bist!\n */\n\nusing System;\nusing System.Collections.Generic;\n\npublic class TwoSumSolution\n{\n    public static int[] FindTwoSum(int[] nums, int target)\n    {\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        \n        for (int i = 0; i < nums.Length; i++)\n        {\n            int complement = target - nums[i];\n            \n            if (map.ContainsKey(complement))\n            {\n                return new int[] { map[complement], i };\n            }\n            \n            if (!map.ContainsKey(nums[i]))\n            {\n                map[nums[i]] = i;\n            }\n        }\n        \n        throw new ArgumentException(\"Keine L√∂sung gefunden\");\n    }\n}",
  "tests": "using System;\n\npublic class TwoSumTests\n{\n    private static int testsPassed = 0;\n    private static int totalTests = 0;\n\n    public static void RunAllTests()\n    {\n        Console.WriteLine(\"üß™ Starte Tests f√ºr: Two Sum Problem\");\n        Console.WriteLine(\"=\" + new string('=', 50));\n\n        TestBasicCase();\n        TestNegativeNumbers();\n        TestZeroTarget();\n        TestDuplicateNumbers();\n\n        Console.WriteLine($\"\\n{testsPassed}/{totalTests} Tests bestanden\");\n        \n        if (testsPassed == totalTests)\n        {\n            Console.WriteLine(\"üéâ Alle Tests bestanden! Challenge gel√∂st!\");\n        }\n        else\n        {\n            Console.WriteLine(\"‚ùå Einige Tests sind fehlgeschlagen.\");\n            Environment.Exit(1);\n        }\n    }\n\n    private static void TestBasicCase()\n    {\n        Test(\"Basis Test [2,7,11,15], target=9\", () => {\n            int[] nums = {2, 7, 11, 15};\n            int target = 9;\n            int[] result = TwoSum.FindTwoSum(nums, target);\n            AssertArrayEqual(new int[] {0, 1}, result);\n        });\n    }\n\n    private static void TestNegativeNumbers()\n    {\n        Test(\"Negative Zahlen [-1,-2,-3,-4,-5], target=-8\", () => {\n            int[] nums = {-1, -2, -3, -4, -5};\n            int target = -8;\n            int[] result = TwoSum.FindTwoSum(nums, target);\n            AssertArrayEqual(new int[] {2, 4}, result);\n        });\n    }\n\n    private static void TestZeroTarget()\n    {\n        Test(\"Ziel ist 0 [-3,4,-1,2,1,-5,6], target=0\", () => {\n            int[] nums = {-3, 4, -1, 2, 1, -5, 6};\n            int target = 0;\n            int[] result = TwoSum.FindTwoSum(nums, target);\n            AssertArrayEqual(new int[] {1, 5}, result);\n        });\n    }\n\n    private static void TestDuplicateNumbers()\n    {\n        Test(\"Doppelte Zahlen [3,3], target=6\", () => {\n            int[] nums = {3, 3};\n            int target = 6;\n            int[] result = TwoSum.FindTwoSum(nums, target);\n            AssertArrayEqual(new int[] {0, 1}, result);\n        });\n    }\n\n    private static void Test(string description, Action testAction)\n    {\n        totalTests++;\n        try\n        {\n            testAction();\n            Console.WriteLine($\"  ‚úÖ {description}\");\n            testsPassed++;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"  ‚ùå {description}\");\n            Console.WriteLine($\"     Fehler: {ex.Message}\");\n        }\n    }\n\n    private static void AssertArrayEqual(int[] expected, int[] actual)\n    {\n        if (expected.Length != actual.Length)\n        {\n            throw new Exception($\"Array L√§ngen unterschiedlich. Erwartet: {expected.Length}, Erhalten: {actual.Length}\");\n        }\n\n        for (int i = 0; i < expected.Length; i++)\n        {\n            if (expected[i] != actual[i])\n            {\n                throw new Exception($\"Arrays unterschiedlich an Index {i}. Erwartet: [{string.Join(\",\", expected)}], Erhalten: [{string.Join(\",\", actual)}]\");\n            }\n        }\n    }\n}",
  "testClassName": "Tests",
  "mainClassName": "TwoSumProblem",
  "functionName": "twoSumProblem"
}