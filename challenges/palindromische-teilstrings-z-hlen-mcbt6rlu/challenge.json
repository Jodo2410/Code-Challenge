{
  "id": "palindromische-teilstrings-z-hlen-mcbt6rlu",
  "title": "Palindromische Teilstrings z√§hlen",
  "description": "Implementiere eine Funktion, die die Anzahl der palindromischen Teilstrings in einem gegebenen String z√§hlt.\n\nEin Palindrom ist ein Wort, eine Zahl, ein Satz oder eine andere Zeichenfolge, die vorw√§rts und r√ºckw√§rts gelesen identisch ist. Ein Teilstring ist eine zusammenh√§ngende Sequenz von Zeichen innerhalb eines Strings.\n\nBeispiele:\n\n```\nEingabe: \"abc\"\nAusgabe: 3\nErkl√§rung: Die palindromischen Teilstrings sind: \"a\", \"b\", \"c\" (einzelne Zeichen sind immer Palindrome)\n\nEingabe: \"aaa\"\nAusgabe: 6\nErkl√§rung: Die palindromischen Teilstrings sind: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"\n\nEingabe: \"abccba\"\nAusgabe: 9\nErkl√§rung: Die palindromischen Teilstrings sind: \"a\", \"b\", \"c\", \"c\", \"b\", \"a\", \"cc\", \"bccb\", \"abccba\"\n```\n\nHinweis: Die L√∂sung sollte in O(n¬≤) Zeit arbeiten, wobei n die L√§nge des Eingabe-Strings ist.",
  "difficulty": "easy",
  "language": "csharp",
  "tags": [
    "strings",
    "dynamic-programming",
    "palindrome",
    "algorithms",
    "csharp",
    "easy"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-25T10:25:50.919Z",
  "status": "reported",
  "starterCode": "using System;\n\npublic class PalindromeCounter\n{\n    /// <summary>\n    /// Z√§hlt die Anzahl der palindromischen Teilstrings in einem gegebenen String.\n    /// </summary>\n    /// <param name=\"s\">Der zu untersuchende String</param>\n    /// <returns>Die Anzahl der palindromischen Teilstrings</returns>\n    public static int CountPalindromicSubstrings(string s)\n    {\n        // TODO: Implementiere deine L√∂sung hier\n        throw new NotImplementedException();\n    }\n}",
  "solution": "using System;\n\npublic class PalindromeCounter\n{\n    /// <summary>\n    /// Z√§hlt die Anzahl der palindromischen Teilstrings in einem gegebenen String.\n    /// </summary>\n    /// <param name=\"s\">Der zu untersuchende String</param>\n    /// <returns>Die Anzahl der palindromischen Teilstrings</returns>\n    public static int CountPalindromicSubstrings(string s)\n    {\n        // Sonderfall: Leerer String\n        if (string.IsNullOrEmpty(s))\n        {\n            return 0;\n        }\n        \n        int count = 0;\n        int n = s.Length;\n        \n        // F√ºr jeden Zeichen-Index im String\n        for (int i = 0; i < n; i++)\n        {\n            // √úberpr√ºfe ungerade L√§nge Palindrome (mit Zentrum i)\n            count += ExpandAroundCenter(s, i, i);\n            \n            // √úberpr√ºfe gerade L√§nge Palindrome (mit Zentrum zwischen i und i+1)\n            if (i < n - 1)\n            {\n                count += ExpandAroundCenter(s, i, i + 1);\n            }\n        }\n        \n        return count;\n    }\n    \n    /// <summary>\n    /// Erweitert die Suche von einem Zentrum aus und z√§hlt Palindrome.\n    /// </summary>\n    /// <param name=\"s\">Der zu untersuchende String</param>\n    /// <param name=\"left\">Der linke Index des Zentrums</param>\n    /// <param name=\"right\">Der rechte Index des Zentrums</param>\n    /// <returns>Die Anzahl der gefundenen Palindrome</returns>\n    private static int ExpandAroundCenter(string s, int left, int right)\n    {\n        int count = 0;\n        \n        // Erweitern, solange wir innerhalb der Grenzen bleiben und es ein Palindrom ist\n        while (left >= 0 && right < s.Length && s[left] == s[right])\n        {\n            count++; // Ein weiteres Palindrom gefunden\n            left--; // Nach links erweitern\n            right++; // Nach rechts erweitern\n        }\n        \n        return count;\n    }\n}",
  "tests": "using System;\n\npublic class Tests\n{\n    private static int testsPassed = 0;\n    private static int totalTests = 0;\n\n    public static void RunAllTests()\n    {\n        Console.WriteLine(\"üß™ Starte Tests f√ºr: Palindromische Teilstrings z√§hlen\");\n        Console.WriteLine(new string('=', 50));\n\n        TestEmptyString();\n        TestSingleCharacter();\n        TestAllSameCharacters();\n        TestNoRepeatingCharacters();\n        TestMixedCharacters();\n        TestLongerPalindromes();\n        TestLargeInput();\n\n        Console.WriteLine($\"\\n{testsPassed}/{totalTests} Tests bestanden\");\n        \n        if (testsPassed == totalTests)\n        {\n            Console.WriteLine(\"üéâ Alle Tests bestanden!\");\n        }\n        else\n        {\n            Console.WriteLine(\"‚ùå Einige Tests fehlgeschlagen.\");\n            Environment.Exit(1);\n        }\n    }\n\n    private static void TestEmptyString()\n    {\n        Test(\"Leerer String\", () => {\n            int result = PalindromeCounter.CountPalindromicSubstrings(\"\");\n            AssertEqual(0, result, \"Ein leerer String sollte 0 palindromische Teilstrings haben\");\n            \n            result = PalindromeCounter.CountPalindromicSubstrings(null);\n            AssertEqual(0, result, \"Ein null-String sollte 0 palindromische Teilstrings haben\");\n        });\n    }\n\n    private static void TestSingleCharacter()\n    {\n        Test(\"Einzelnes Zeichen\", () => {\n            int result = PalindromeCounter.CountPalindromicSubstrings(\"a\");\n            AssertEqual(1, result, \"Ein einzelnes Zeichen sollte 1 palindromischen Teilstring haben\");\n        });\n    }\n\n    private static void TestAllSameCharacters()\n    {\n        Test(\"Alle gleichen Zeichen\", () => {\n            int result = PalindromeCounter.CountPalindromicSubstrings(\"aaa\");\n            AssertEqual(6, result, \"'aaa' sollte 6 palindromische Teilstrings haben\");\n            \n            result = PalindromeCounter.CountPalindromicSubstrings(\"aaaa\");\n            AssertEqual(10, result, \"'aaaa' sollte 10 palindromische Teilstrings haben\");\n        });\n    }\n\n    private static void TestNoRepeatingCharacters()\n    {\n        Test(\"Keine wiederholenden Zeichen\", () => {\n            int result = PalindromeCounter.CountPalindromicSubstrings(\"abc\");\n            AssertEqual(3, result, \"'abc' sollte 3 palindromische Teilstrings haben (a, b, c)\");\n            \n            result = PalindromeCounter.CountPalindromicSubstrings(\"abcdef\");\n            AssertEqual(6, result, \"'abcdef' sollte 6 palindromische Teilstrings haben (a, b, c, d, e, f)\");\n        });\n    }\n\n    private static void TestMixedCharacters()\n    {\n        Test(\"Gemischte Zeichen\", () => {\n            int result = PalindromeCounter.CountPalindromicSubstrings(\"aabaa\");\n            AssertEqual(9, result, \"'aabaa' sollte 9 palindromische Teilstrings haben\");\n            \n            result = PalindromeCounter.CountPalindromicSubstrings(\"aabb\");\n            AssertEqual(6, result, \"'aabb' sollte 6 palindromische Teilstrings haben (a, a, b, b, aa, bb)\");\n        });\n    }\n\n    private static void TestLongerPalindromes()\n    {\n        Test(\"L√§ngere Palindrome\", () => {\n            int result = PalindromeCounter.CountPalindromicSubstrings(\"racecar\");\n            AssertEqual(10, result, \"'racecar' sollte 10 palindromische Teilstrings haben\");\n            \n            result = PalindromeCounter.CountPalindromicSubstrings(\"abccba\");\n            AssertEqual(9, result, \"'abccba' sollte 9 palindromische Teilstrings haben\");\n        });\n    }\n\n    private static void TestLargeInput()\n    {\n        Test(\"Gro√üe Eingabe\", () => {\n            // Erstelle einen String mit 1000 'a's\n            string largeString = new string('a', 1000);\n            int result = PalindromeCounter.CountPalindromicSubstrings(largeString);\n            \n            // F√ºr n 'a's haben wir n*(n+1)/2 Palindrome (Summe von 1 bis n)\n            int expected = (1000 * 1001) / 2;\n            AssertEqual(expected, result, $\"Ein String mit 1000 gleichen Zeichen sollte {expected} palindromische Teilstrings haben\");\n        });\n    }\n\n    private static void Test(string description, Action testAction)\n    {\n        totalTests++;\n        try\n        {\n            testAction();\n            Console.WriteLine($\"  ‚úÖ {description}\");\n            testsPassed++;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"  ‚ùå {description}: {ex.Message}\");\n        }\n    }\n\n    private static void AssertEqual<T>(T expected, T actual, string message = null)\n    {\n        if (!Equals(expected, actual))\n        {\n            throw new Exception($\"{message ?? \"\"}\\nErwartet: {expected}, Erhalten: {actual}\");\n        }\n    }\n}",
  "testClassName": "Tests",
  "mainClassName": "PalindromischeTeilstringsZhlen",
  "functionName": "PalindromischeTeilstringsZhlen",
  "lastUpdated": 1751006869.347339,
  "reportedIssueNumber": 100,
  "reportedIssueUrl": "https://github.com/Jodo2410/Code-Challenge/issues/100",
  "reportedAt": "2025-06-28T00:04:52.977Z",
  "isHidden": true
}