{
  "id": "z-hle-g-ltige-subarrays-mit-gleicher-anzahl-von-0-und-1-mcbxuq8p",
  "title": "Zähle gültige Subarrays mit gleicher Anzahl von 0 und 1",
  "description": "Gegeben ist ein Array aus nur den Zahlen 0 und 1. Ziel ist es, die Anzahl der Subarrays zu zählen, in denen die Anzahl von 0 und 1 gleich ist.\n\nEin Subarray ist eine zusammenhängende Teilmenge des Arrays.\n\nBeispiel 1:\nInput: [0, 1]\nOutput: 1\nErklärung: Nur das Subarray [0, 1] hat gleich viele 0 und 1.\n\nBeispiel 2:\nInput: [0, 1, 0]\nOutput: 2\nErklärung: Die gültigen Subarrays sind [0,1] und [1,0].\n\nBeispiel 3:\nInput: [0, 0, 1, 1, 0]\nOutput: 4\nErklärung: Gültige Subarrays sind [0,1], [0,0,1,1], [1,1], [1,1,0].\n\nHinweis: Für eine effiziente Lösung sollte die Zeitkomplexität O(n) sein.",
  "difficulty": "medium",
  "language": "csharp",
  "tags": [
    "arrays",
    "hashmap",
    "prefixsum",
    "algorithmen",
    "csharp",
    "medium"
  ],
  "author": "Jodo2410",
  "createdAt": "2025-06-25T12:36:27.322Z",
  "status": "approved",
  "starterCode": "using System;\nusing System.Collections.Generic;\n\npublic static class Solution {\n    public static int CountBalancedSubarrays(int[] nums) {\n        // Deine Lösung hier\n        return 0;\n    }\n}",
  "solution": "using System;\nusing System.Collections.Generic;\n\npublic static class Solution {\n    public static int CountBalancedSubarrays(int[] nums) {\n        Dictionary<int, int> prefixCount = new Dictionary<int, int>();\n        int count = 0;\n        int prefixSum = 0;\n        prefixCount[0] = 1;\n\n        foreach (int num in nums) {\n            // Wir behandeln 0 als -1\n            prefixSum += (num == 0) ? -1 : 1;\n\n            if (prefixCount.ContainsKey(prefixSum)) {\n                count += prefixCount[prefixSum];\n                prefixCount[prefixSum]++;\n            } else {\n                prefixCount[prefixSum] = 1;\n            }\n        }\n\n        return count;\n    }\n}",
  "tests": "using System;\n\npublic static class Tests {\n    public static void RunAllTests() {\n        Test(new int[] {0, 1}, 1, \"Test 1\");\n        Test(new int[] {0, 1, 0}, 2, \"Test 2\");\n        Test(new int[] {0, 0, 1, 1, 0}, 4, \"Test 3\");\n        Test(new int[] {0, 1, 1, 0, 1, 0, 0}, 9, \"Test 4\");\n        Test(new int[] {}, 0, \"Test 5 - Leeres Array\");\n        Test(new int[] {1, 1, 1, 0, 0, 0, 1}, 6, \"Test 6\");\n    }\n\n    private static void Test(int[] input, int expected, string testName) {\n        int result = Solution.CountBalancedSubarrays(input);\n        if (result == expected) {\n            Console.WriteLine($\"[✔] {testName} bestanden\");\n        } else {\n            Console.WriteLine($\"[✘] {testName} fehlgeschlagen: erwartet {expected}, erhalten {result}\");\n        }\n    }\n}",
  "testClassName": "Tests",
  "mainClassName": "ZhleGltigeSubarraysMitGleicherAnzahlVon0Und1",
  "functionName": "ZhleGltigeSubarraysMitGleicherAnzahlVon0Und1"
}